# Document Index
- [Bug Report Template](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/.github/ISSUE_TEMPLATE/bug_report.md): A template for reporting bugs, including sections for describing the bug, reproduction steps, expected behavior, screenshots, desktop and smartphone information, and additional context.
- [Feature Request Form](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/.github/ISSUE_TEMPLATE/feature_request.md): This document outlines a template for submitting a feature request, including sections for describing the problem, the proposed solution, alternative solutions, and additional context.
- [Development Guidelines for the Codebase](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/CLAUDE.md): This document outlines the development guidelines for a codebase, covering package management, code quality, testing requirements, pull request procedures, and the use of Python tools like Ruff and Pyright for formatting and type checking. It also includes sections on pre-commit hooks and error resolution strategies for common issues like CI failures, line length, and type errors.
- [Contributor Covenant Code of Conduct](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/CODE_OF_CONDUCT.md): This document outlines the Contributor Covenant Code of Conduct, detailing pledges for a harassment-free and inclusive community, examples of acceptable and unacceptable behaviors, and the responsibilities of community leaders in enforcing these standards. It also specifies the scope of the code, how to report violations, and the enforcement guidelines, including consequences like correction, warning, temporary ban, and permanent ban.
- [Contributing to the MCP Python SDK](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/CONTRIBUTING.md): This document outlines the guidelines and instructions for contributing to the MCP Python SDK. It covers development setup, workflow, code style, pull request process, and adherence to the Code of Conduct and MIT License.
- [MCP Python SDK](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/README.md): The MCP Python SDK implements the Model Context Protocol (MCP) specification, allowing applications to provide context for Large Language Models (LLMs) in a standardized way. It facilitates building MCP clients and servers, exposing data through resources, providing functionality through tools, and defining interaction patterns with prompts. The SDK handles protocol messages, lifecycle events, and supports standard transports like stdio, SSE, and Streamable HTTP. It enables secure and standardized interactions between LLMs and external data/functionality, serving as a robust framework for developing LLM-integrated applications.
- [Release Process](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/RELEASE.md): This document outlines the release process, including bumping dependencies and creating major or minor releases. It details steps like updating `pyproject.toml`, upgrading the lock file, and creating a GitHub release with a specific tag and title. The package version is automatically set from the tag, with a review by another team member required before publishing.
- [Security Policy](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/SECURITY.md): This document outlines the security policy for reporting vulnerabilities in the SDKs and related systems maintained by Anthropic. It directs users to report security issues through Anthropic's HackerOne submission form and refers to their HackerOne program page for vulnerability disclosure guidelines.
- [api](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/docs/api.md): This document contains content likely related to a Movie Content Platform (MCP). The specific nature of the content is not detailed within the provided snippet.
- [MCP Server](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/docs/index.md): This document describes the MCP Server implementation in Python and currently only contains the API Reference.
- [Python SDK Examples](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/examples/README.md): This folder provides simple examples of using the Python SDK. For real-world servers, refer to the servers repository.
- [Simple Auth Client Example](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/examples/clients/simple-auth-client/README.md): This document describes a simple authentication client example that uses the MCP Python SDK with OAuth authentication over streamable HTTP or SSE transport. It details features like OAuth 2.0 with PKCE, support for StreamableHTTP and SSE, and an interactive command-line interface. The document also provides installation and usage instructions, including how to start an MCP server, run the client, complete the OAuth flow, and use available commands. It concludes with an example interaction and configuration options for the client.
- [MCP Simple Chatbot](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/examples/clients/simple-chatbot/README.MD): This document describes a simple CLI chatbot that integrates the Model Context Protocol (MCP), supporting multiple tools through MCP servers and compatibility with any OpenAI API-standard LLM provider. It details requirements, installation, configuration of servers, usage instructions, and architectural insights into tool discovery, system prompt integration, and server interaction.
- [Python Project Requirements](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/examples/clients/simple-chatbot/mcp_simple_chatbot/requirements.txt): This file lists the Python packages and their minimum versions required for this project, including python-dotenv, requests, mcp, and uvicorn.
- [Simple MCP Server with GitHub OAuth Authentication](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/examples/servers/simple-auth/README.md): This document describes a simple MCP (Model Context Protocol) server that uses GitHub OAuth for authentication. It demonstrates the setup of a server with GitHub OAuth2 authorization flow, including prerequisites for creating a GitHub OAuth App and setting required environment variables. The server includes a single tool, `get_user_profile`, which retrieves the authenticated user's GitHub profile information. It also covers running the server and various transport options like SSE and Streamable HTTP, along with troubleshooting tips.
- [MCP Simple Prompt](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/examples/servers/simple-prompt/README.md): An MCP server that provides a customizable prompt template with optional context and topic parameters. It can be run using stdio or SSE transport. The server exposes a prompt named "simple" that accepts optional "context" and "topic" arguments. An example demonstrates how to use the MCP client to retrieve the prompt with arguments.
- [MCP Simple Resource](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/examples/servers/simple-resource/README.md): The MCP Simple Resource is an MCP server designed to expose sample text files as resources. It offers flexible transport options, including stdio and SSE, and provides examples for client interaction, demonstrating how to list and retrieve resources like "greeting.txt" using the MCP client library.
- [MCP Simple StreamableHttp Stateless Server Example](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/examples/servers/simple-streamablehttp-stateless/README.md): This example demonstrates a stateless MCP server utilizing the StreamableHttp transport, suitable for multi-node deployments where no session state is maintained between requests. It highlights features like ephemeral connections and task lifecycles scoped to individual requests. The server exposes a "start-notification-stream" tool with customizable interval, count, and caller arguments. Usage instructions for starting the server with various options and notes on client connectivity are provided.
- [MCP Simple StreamableHttp Server Example](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/examples/servers/simple-streamablehttp/README.md): This document describes a simple MCP server example that uses the StreamableHttp transport for HTTP-based communication. It supports REST API operations, task management, and resumability. Instructions for starting the server and using its features are provided. It also details how to connect to the server using HTTP clients.
- [MCP Simple Tool README](https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/examples/servers/simple-tool/README.md): This document describes a simple MCP server that exposes a website fetching tool. It details usage, including how to start the server with different transports and how to use the "fetch" tool with its required URL argument. An example demonstrates using the MCP client to list tools and call the "fetch" tool.
