# Document Index
- [API/ABI/CMD Stability in R2](https://raw.githubusercontent.com/radareorg/radare2/master/doc/abi.md): This document outlines the API/ABI/CMD stability policy in R2, specifically how development occurs between versions, what changes are allowed, and how breaking changes are introduced in .9 releases. It details what developers can and cannot do in different release cycles to ensure stability and compatibility, and mentions that the CI uses `abidiff` to enforce these rules.
- [r2 on Android](https://raw.githubusercontent.com/radareorg/radare2/master/doc/android.md): This document outlines the steps to install the Android NDK on Arch Linux x86-64 and build r2 for Android. It includes instructions for configuring the NDK paths, compiling for different architectures (ARM, ARM64, x86), packaging the build, and using the build farm scripts.
- [AVR Microcontroller Debugging](https://raw.githubusercontent.com/radareorg/radare2/master/doc/avr.md): This document provides instructions on how to debug an AVR microcontroller using the JTAG interface via USB and the GDB protocol, including driver installation for macOS, plugin setup with avarice, and connecting to the GDB server.
- [Brainfuck Support for r2](https://raw.githubusercontent.com/radareorg/radare2/master/doc/brainfuck.md): This document describes the plugins available for Brainfuck in r2, including a debugger, code analysis, and experimental breakpoint support. It also provides instructions for debugging Brainfuck programs and includes a "Hello World" example.
- [Calling Conventions](https://raw.githubusercontent.com/radareorg/radare2/master/doc/calling-conventions.md): This document outlines how Radare2 uses calling conventions to identify function arguments and return types. It details the profile grammar, attribute list for defining conventions (e.g., argument registers, stack passing, return value location), and file path conventions for integrating custom calling convention profiles into the Radare2 source.
- [Capstone Engine for R2](https://raw.githubusercontent.com/radareorg/radare2/master/doc/capstone.md): This document explains Capstone Engine's role as the default disassembler in radare2 (R2), detailing support for Capstone versions 4 and 5, installation procedures, and considerations for using system-wide Capstone and the upcoming Capstone 6.
- [Cross-compiling with Docker](https://raw.githubusercontent.com/radareorg/radare2/master/doc/cross-compile.md): This document outlines the process of cross-compiling software, specifically radare, for various architectures using Docker and the dockcross tool. It provides an example for ARMv5, detailing the necessary configuration changes and commands to build within a Docker container.
- [Radare Debugger Internals](https://raw.githubusercontent.com/radareorg/radare2/master/doc/debug-internals.md): This document outlines the internal architecture of the Radare debugger, detailing its multi-tiered plug-in system. It covers the core components like I/O, register handling, breakpoints, and the main debugging functionalities. The document also describes various debugger plug-ins, including those for Brainfuck, Bochs, ESIL, GDB, and native debugging on different operating systems (Windows, OSX, Linux, BSD).
- [Conditional Breakpoints](https://raw.githubusercontent.com/radareorg/radare2/master/doc/debug.md): This document explains how conditional breakpoints work by running a command when a breakpoint is hit. If the command returns a non-zero value, execution continues; otherwise, it stops. Examples demonstrate ignoring breakpoints a set number of times, breaking based on register values, and tracing register dumps.
- [Developer's Guide for Debugging Radare2](https://raw.githubusercontent.com/radareorg/radare2/master/doc/devdebug.md): This document serves as a comprehensive guide for developers on debugging Radare2, offering insights into common practices for identifying and resolving bugs, memory corruptions, leaks, and race conditions. It covers compilation, managing multiple Radare2 builds, various sanitization and profiling tools like ASAN, Valgrind, and GPerfTools, and the use of debuggers and Frida-Trace for effective troubleshooting. The guide simplifies complex debugging processes, making it easier for developers to maintain and improve Radare2's stability and performance.
- [Building for the Browser with Emscripten](https://raw.githubusercontent.com/radareorg/radare2/master/doc/emscripten.md): This document outlines the steps to build applications for the browser using Emscripten, specifically focusing on how to install Emscripten and then build the radare project.
- [Evaluable Strings Intermediate Language (ESIL)](https://raw.githubusercontent.com/radareorg/radare2/master/doc/esil.md): ESIL (Evaluable Strings Intermediate Language) is a Forth-like language used to describe and emulate the behavior of opcodes. It features a stack-based VM for computations, memory access, and syscalls. ESIL expressions, provided by RArch, can be debugged and analyzed for various instruction characteristics like memory references, branches, and flag modifications.
- [FLIRT Signatures in Radare2](https://raw.githubusercontent.com/radareorg/radare2/master/doc/flirt.md): This document explains how to use FLIRT (Fast Library Identification and Recognition Technology) signatures within Radare2 (r2). It covers the creation of .pat and .sig files using IDA's FLAIR tools, and how to apply these signatures in r2 for library identification. The document also touches upon the legal and licensing considerations of using and distributing these proprietary files.
- [FreeBSD Build Instructions](https://raw.githubusercontent.com/radareorg/radare2/master/doc/freebsd.md): This document outlines the steps to build r2 and r2b-python on FreeBSD, covering dependencies for Radare2 and Python Swig Bindings, including specific commands for installation and configuration.
- [Connecting r2 with gdb](https://raw.githubusercontent.com/radareorg/radare2/master/doc/gdb.md): This document outlines how to connect r2 (radare2) with GDB, including instructions for running gdbserver and connecting from r2. It also details the supported implementations, commands (read/write memory, read/write registers, stepping), and GDB packets.
- [GProbe: Radare2 Tool for Video Chipset Communication](https://raw.githubusercontent.com/radareorg/radare2/master/doc/gprobe.md): GProbe is a protocol used to communicate with various video chip components, primarily those from Genesis/STMicro/MegaChips/Kinetic Technologies, which integrate a Turbo186 core. While a proprietary Windows tool exists, Radare2 provides enhanced functionality for interacting with these chips. This document details the implemented GProbe features within Radare2, including RAM access, CPU control, and flash operations, along with instructions on how to use it for various tasks like memory dumping, analysis, and flashing firmware. The tool supports communication via serial and DDC2Bi3 protocols and has been tested across different operating systems and hardware configurations. It also highlights the setup for the Turbo186 processor core and provides a step-by-step guide for flashing devices.
- [r2 for Haiku](https://raw.githubusercontent.com/radareorg/radare2/master/doc/haiku.md): This document provides instructions for compiling and installing radare2 (r2) on Haiku OS, including configuration steps and commands for building and installing. It also outlines the necessary dependencies for installing r2-bindings and mentions a to-do item for adding debugging support.
- [IDA](https://raw.githubusercontent.com/radareorg/radare2/master/doc/ida.md): This document provides information on conversion scripts for working with radare2 and IDA files (IDC, IDB), which are available in the r2ida repository.
- [Radare2 Commands and Configuration](https://raw.githubusercontent.com/radareorg/radare2/master/doc/intro.md): This document outlines essential Radare2 commands for command-line operations, configuration management, and basic file analysis. It covers various functionalities including command-line options, configuration properties, basic commands, positioning, block size, JSON output, analysis commands for functions and opcodes, information retrieval, and print and write operations.
- [r_io/r_core-file fixing](https://raw.githubusercontent.com/radareorg/radare2/master/doc/io-fixing.md): This document outlines the conceptual guidelines and tasks for fixing the `r_io/r_core-file` module, emphasizing that all I/O related operations should be handled within `r_io`. It details the proper creation and destruction of `RIODesc` and `RIOMap` objects when opening and closing files, clarifies the core's role in delegation, and identifies specific files (`libr/io/io.c` and `libr/core/file.c`) needing review. The document also lists several tasks, categorized by difficulty, to improve the current implementation, including removing re-implementations, implementing new I/O functions like `r_io_open_at`, and cleaning up `r_core_file` functions.
- [io](https://raw.githubusercontent.com/radareorg/radare2/master/doc/io.md): This document outlines how I/O should function, covering maps for file descriptor selection, sections for virtual to physical address mapping, and the handling of base addresses and read/write operations. It also discusses the association of sections with files, the behavior of write operations regarding permissions, and the need to merge duplicated section information in I/O and binary modules.
- [iOS Development Guide](https://raw.githubusercontent.com/radareorg/radare2/master/doc/ios.md): This document outlines the process of building, signing, packaging, and installing applications for iOS, focusing on the radare2 framework. It covers different compilation methods, code signing with entitlements, Cydia package creation, and installation procedures on jailbroken iOS devices.
- [Building Radare2 for iOS](https://raw.githubusercontent.com/radareorg/radare2/master/doc/iphone.md): This document outlines the steps for building and installing Radare2 on iOS devices, covering compilation from source, SDK setup, and packaging for Cydia. It provides instructions for different ARM architectures (armv6, armv7, and arm64).
- [Kvast KeyValue Storage for AST](https://raw.githubusercontent.com/radareorg/radare2/master/doc/kvast.md): Kvast is a KeyValue storage solution for Abstract Syntax Trees (AST). It optimizes serialized storage using a concatenated string array and the sdb array string API. The document provides examples of how expressions are parsed into ESIL instructions using a state machine.
- [Licensing](https://raw.githubusercontent.com/radareorg/radare2/master/doc/licenses.md): This document outlines the licensing of r2, primarily under LGPLv3, and discusses implications for static linking, r2pipe usage, and proprietary product integration. It also details how to check licenses for r2 builds and plugins, and lists components with licenses other than LGPL, including GPL, MIT, BSD, and Apache 2.0.
- [Apache License 2.0](https://raw.githubusercontent.com/radareorg/radare2/master/doc/licenses/Apache-2.0.txt): The Apache License 2.0 is a permissive free software license from the Apache Software Foundation. It allows users to use, modify, and distribute software under the license, with requirements to retain copyright and attribution notices. It includes provisions for patent grants and disclaims warranties while limiting liability.
- [BSD 3-Clause License](https://raw.githubusercontent.com/radareorg/radare2/master/doc/licenses/BSD-3-Clause.txt): The BSD 3-Clause License is a permissive free software license that allows for redistribution and use in source and binary forms, with or without modification, provided that certain conditions are met, including the retention of copyright notices, disclaimers, and restrictions on using the names of copyright holders or contributors for endorsement.
- [GNU General Public License v3](https://raw.githubusercontent.com/radareorg/radare2/master/doc/licenses/GPL-3.0-only.txt): The GNU General Public License v3 (GPLv3) is a free, copyleft license for software and other works, designed to guarantee the freedom to share and change all versions of a program. It ensures users can distribute, modify, and receive source code, while preventing others from denying these rights. The license prohibits restricting users from installing modified software versions on their devices and aims to prevent patents from making free software proprietary. It defines terms like "The Program," "propagate," and "convey," and outlines rules for source code, including "Corresponding Source."
- [GNU Lesser General Public License v3](https://raw.githubusercontent.com/radareorg/radare2/master/doc/licenses/LGPL-3.0-only.txt): The GNU Lesser General Public License (LGPL) version 3 is a free, copyleft license for software, published by the Free Software Foundation. It allows for the use of a library in a larger work, even if the larger work is not open source, under certain conditions. It defines terms like "Library," "Application," and "Combined Work" and outlines exceptions, conveying modified versions, incorporating material from header files, and combining works and libraries. It also specifies how revised versions of the license are handled.
- [MIT License](https://raw.githubusercontent.com/radareorg/radare2/master/doc/licenses/MIT.txt): The MIT License is a permissive free software license that allows users to freely use, modify, and distribute the software, with the main conditions being that the original copyright and license notice are included in all copies or substantial portions of the software. It provides no warranty and disclaims liability for any damages arising from the software. It is a widely used and popular open-source license.
- [zlib License](https://raw.githubusercontent.com/radareorg/radare2/master/doc/licenses/Zlib.txt): The zlib License is a permissive free software license that allows users to freely use, modify, and distribute the software, even for commercial purposes. It includes basic restrictions regarding misrepresentation of origin and altered versions, and requires the license notice to remain intact. It is similar to the BSD or MIT licenses.
- [macOS Radare2 Installation and Troubleshooting](https://raw.githubusercontent.com/radareorg/radare2/master/doc/macos.md): This document outlines the steps for installing, signing, and troubleshooting radare2 on macOS, including addressing issues related to arm64e processors, code signing requirements for debugging, and certificate management. It also covers packaging and uninstalling radare2 on macOS.
- [Macro Examples](https://raw.githubusercontent.com/radareorg/radare2/master/doc/macros.md): This document provides examples of how to define and execute macros. It includes a basic "Hello, World" macro, a macro demonstrating looping functionality, and a detailed implementation of a backtrace macro for x86-64 architecture.
- [Build Instructions for Maemo 6 (Harmattan) N9 - N950](https://raw.githubusercontent.com/radareorg/radare2/master/doc/maemo.md): This document outlines the steps to build and install software for Maemo 6 (Harmattan) on Nokia N9 and N950 devices. It covers installing QtSDK, configuring the Maemo development environment (mad), compiling the software, creating the package, and finally installing it using dpkg.
- [r2 4 OpenBSD](https://raw.githubusercontent.com/radareorg/radare2/master/doc/openbsd.md): This document outlines the steps to build r2 and r2b-python on OpenBSD, addressing specific considerations such as GNU make being gmake, installation paths, compiler naming conventions, and the absence of valabind in ports.
- [PDB Usage with Rabin2](https://raw.githubusercontent.com/radareorg/radare2/master/doc/pdb/pdb_usage.md): This document outlines how to use `rabin2` to interact with and extract information from PDB (Program Database) files. It covers commands for retrieving information on functions, structures, unions, and enumerations, exporting type and function data, and downloading PDB files for binaries. The document also notes the dependencies required for PDB file downloads.
- [LIBR Plugins](https://raw.githubusercontent.com/radareorg/radare2/master/doc/plugins.md): This document outlines the configuration and compilation of plugins for LIBR. It details how plugins can be compiled as shared or static libraries, and mentions the use of the `configure-plugins` script for regenerating Makefiles. The `R2_LIBR_PLUGINS` environment variable is also noted for specifying plugin search paths. This feature is currently not implemented.
- [r2 on Android](https://raw.githubusercontent.com/radareorg/radare2/master/doc/qnx.md): Instructions on how to compile and install radare2 on an Android device using the QNX compiler, including environment setup and build commands.
- [ASCII Art](https://raw.githubusercontent.com/radareorg/radare2/master/doc/r2ascii.txt): This file contains an ASCII art representation which resembles a stylized signature or logo.
- [r2pipe2: A New Protocol for Asynchronous Command Execution](https://raw.githubusercontent.com/radareorg/radare2/master/doc/r2pipe2.md): This document outlines a proposed new JSON-based r2pipe protocol (r2pipe2) that addresses limitations of the existing protocol. It aims to enable non-blocking command execution, capture stderr and logging messages, associate return codes with commands, and offer extensibility through metadata. The proposal details the handshake process and how commands can be run with sequence IDs for asynchronous processing. This new protocol will be identifiable by a leading "{" character, distinguishing it from the null-byte-prefixed r2pipe1.
- [Radare2 Remote Access Protocol (RAP)](https://raw.githubusercontent.com/radareorg/radare2/master/doc/rap.md): The Radare2 Remote Access Protocol (RAP) defines a communication method between a client and server to simulate I/O operations, with implementations in both C and Python. It supports operations like opening, reading, writing, seeking, and closing files, addressing various known bugs and outlining packet structures for these operations.
- [RAPATCH](https://raw.githubusercontent.com/radareorg/radare2/master/doc/rapatch.md): RAPATCH is a human-friendly text format for applying patches to binary files. This document describes its syntax, which includes commands for code blocks, strings, hexadecimal values, and assembly instructions at specified offsets. It also provides examples and instructions for running RAPATCH scripts with r2.
- [Release Rules and Procedures](https://raw.githubusercontent.com/radareorg/radare2/master/doc/releases.md): This document outlines the rules and procedures for software releases, including release frequency, versioning, quality checks, and future considerations. It emphasizes the importance of removing warnings, syncing Vala APIs, conducting unit tests, and cross-platform compatibility قبل releasing.
- [rgraph](https://raw.githubusercontent.com/radareorg/radare2/master/doc/rgraph.md): A graph illustrates the relationships between APIs within the libr ecosystem, focusing on core components like configuration, console, assembly, diffing, and I/O. It also shows connections to debugging, plugins, and language-specific functionalities.
- [Sandboxing r2](https://raw.githubusercontent.com/radareorg/radare2/master/doc/sandbox/README.md): This document describes the sandboxing capabilities of radare2 (r2), covering its native support and integration with platform-specific sandboxing mechanisms like OSX Seatbelt, OpenBSD's pledge(2) and systrace, and FreeBSD's Capsicum framework, while also detailing r2's internal sandboxing features such as disabling filesystem access, network connectivity, and forks.
- [Solving DLLNAME.sdb Not Found Error](https://raw.githubusercontent.com/radareorg/radare2/master/doc/sdb_ordinal.md): This guide outlines the steps to resolve the "Cannot find R2PATH/format/dll/DLLNAME.sdb" error, providing instructions on generating the missing SDB file, uploading it to the radare2 repository, modifying the Makefile, and submitting a pull request.
- [SIOL - Simple IO Layer](https://raw.githubusercontent.com/radareorg/radare2/master/doc/siol.md): SIOL (Simple IO Layer) manages memory and file mappings within a system. It includes components like a write-mask, buffer, and caches, and handles mapping information such as “from,” “to,” “delta,” and “fd.” SIOL supports section transformations for various targets: Hexeditor, Analysis, and Emulation.
- [Installing the radare2 snap package](https://raw.githubusercontent.com/radareorg/radare2/master/doc/snap.md): This document outlines the installation, usage, and management of the radare2 snap package, detailing commands, confinement types, and troubleshooting tips. It also lists supported architectures and explains how to get information about the installed snap, update it, and uninstall it.
- [Oracle Solaris Notes](https://raw.githubusercontent.com/radareorg/radare2/master/doc/solaris.md): This document provides notes for Oracle Solaris, including necessary packages for installation and compilation instructions. It covers how to install gcc-3 and gmake, and steps to configure, make, and install the software.
- [Statically Linking r2](https://raw.githubusercontent.com/radareorg/radare2/master/doc/static.md): This document provides instructions for statically linking r2, including license considerations. It explains configuration options for creating a static library, such as using `./configure --prefix=/usr --with-nonpic --without-pic` or `sys/static.sh`. Additionally, it mentions that Android builds are statically linked for easier distribution and faster loading, with scripts like `sys/android-arm.sh` and `sys/android-shell.sh arm` available for this purpose.
- [Loading Strings from Binaries](https://raw.githubusercontent.com/radareorg/radare2/master/doc/strings.md): This document explains how to load strings from binary files using various configuration variables and program arguments. It details the use of `bin.strings` and `bin.rawstr` for string loading, along with examples using `rabin2` and `r2` commands.
- [Termux](https://raw.githubusercontent.com/radareorg/radare2/master/doc/termux.md): Termux is a terminal emulator providing a Linux environment on Android devices. This document covers installation, building from git, building with meson, and updating Termux.
- [WinDBG Support in r2](https://raw.githubusercontent.com/radareorg/radare2/master/doc/windbg.md): This document describes how to use radare2 (r2) with WinDBG to debug Windows systems. It covers setting up WinDBG on Windows Vista/higher and XP, configuring VirtualBox or QEMU for debugging, and using r2 with the "winkd" plugin. The document also provides commands for attaching to processes and handling debugger traps.
- [Native Windows Builds](https://raw.githubusercontent.com/radareorg/radare2/master/doc/windows.md): This document outlines the standard instructions for building radare2 on Windows, covering requirements, compilation steps, running the application, and debugging. It also touches upon cross-compilation, blob builds for a single executable, and continuous integration. Troubleshooting tips for common issues are provided.
- [Yara Plugin Documentation](https://raw.githubusercontent.com/radareorg/radare2/master/doc/yara.md): This document provides an overview of the Yara plugin for radare2, explaining its purpose, installation requirements, and usage. It details how to add, remove, and scan files with Yara rules, including pre-bundled rules and custom rule files. The document also touches upon compatibility with different Yara versions.
