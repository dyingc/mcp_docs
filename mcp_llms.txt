# Document Index
- [MCP Documentation Guidelines](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/CLAUDE.md): This document outlines guidelines for contributing to MCP documentation. It covers build commands, style conventions, file organization, and documentation standards, including practical advice on formatting CLI commands and organizing content for user understanding.
- [Contributor Covenant Code of Conduct](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/CODE_OF_CONDUCT.md): This Code of Conduct outlines the pledges, standards, and enforcement responsibilities for a harassment-free community. It details acceptable and unacceptable behaviors, and provides guidelines for addressing violations, ranging from corrections to permanent bans. The document also specifies the scope of the code and how to report incidents.
- [Contributing to MCP Documentation](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/CONTRIBUTING.md): This document outlines the guidelines and process for contributing to the Model Context Protocol (MCP) documentation, covering setup, content creation, pull request submission, and resources for help.
- [Model Context Protocol documentation](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/README.md): This document contains information about the Model Context Protocol. The documentation for this protocol has been moved to a new GitHub repository. Please file issues and pull requests for documentation changes there.
- [MCP Client Applications](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/clients.mdx): This document provides an overview of applications that support the Model Context Protocol (MCP), detailing the specific MCP features (Resources, Prompts, Tools, Sampling, Roots) supported by each client, such as Claude Desktop App, Claude Code, 5ire, BeeAI Framework, and others, along with notes on their integration capabilities.
- [Contributing](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/development/contributing.mdx): This document outlines how to contribute to the Model Context Protocol, including guidelines for submitting changes, the Code of Conduct, and where to ask questions.
- [Roadmap](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/development/roadmap.mdx): This document outlines the Model Context Protocol's (MCP) evolving roadmap for the next six months, focusing on validation, a centralized registry, agentic workflow improvements, multimodality, and governance. It emphasizes community participation and transparent standardization while noting that these plans are subject to change. The document provides insights into the project's direction and encourages community involvement in its development.
- [What's New - Updates to MCP SDKs and Infrastructure](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/development/updates.mdx): This document outlines recent updates and improvements to the Model Context Protocol (MCP), including new SDK releases for Kotlin, Java, C#, Python, and TypeScript. It also covers enhancements to the server infrastructure and the addition of new client integrations.
- [Core Architecture](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/docs/concepts/architecture.mdx): The Model Context Protocol (MCP) uses a client-server architecture to facilitate communication between LLM applications (hosts) and integrations. This document outlines the core components: the Protocol layer for message framing, the Transport layer for communication (Stdio or HTTP with SSE), and various message types (Requests, Results, Errors, Notifications). It also explains the connection lifecycle (initialization, message exchange, termination), error handling, implementation examples, and best practices for transport selection and message handling.
- [Prompts](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/docs/concepts/prompts.mdx): Prompts in MCP allow servers to define reusable prompt templates and workflows that clients can expose to users and LLMs. They can accept dynamic arguments, include context from resources, chain multiple interactions, guide specific workflows, and surface as UI elements. Clients can discover available prompts via the `prompts/list` endpoint and use specific prompts via the `prompts/get` endpoint, which supports dynamic prompts with embedded resource context and multi-step workflows. This document provides an example implementation in TypeScript and Python.
- [Resources](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/docs/concepts/resources.mdx): Resources are a core primitive in the Model Context Protocol (MCP) that allow servers to expose data and content that can be read by clients and used as context for LLM interactions. Resources are application-controlled, represented by URIs, and can contain text or binary data. Clients can discover resources directly or via templates, read their contents, and subscribe to updates. The document outlines best practices and security considerations for implementing resource support in MCP.
- [Roots](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/docs/concepts/roots.mdx): Roots in MCP define the boundaries where servers can operate, guiding them to relevant resources and locations. They are URIs (like filesystem paths or HTTP URLs) that clients suggest servers focus on, providing clarity and organization for working with various resources simultaneously. Clients declare a "roots" capability and provide a list of suggested roots to the server, which then uses them to locate and access resources within these defined boundaries. Common use cases include project directories, API endpoints, and configuration locations, and best practices involve suggesting only necessary resources and using clear, descriptive names.
- [Sampling](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/docs/concepts/sampling.mdx): Sampling is a powerful MCP feature that allows servers to request LLM completions through the client, enabling sophisticated agentic behaviors while maintaining security and privacy. The client handles the sampling flow, which involves reviewing requests, sampling from an LLM, reviewing the completion, and returning the result to the server, ensuring human-in-the-loop control. This document details the message format, request parameters, response format, best practices, human-in-the-loop controls, security considerations, common patterns, and limitations of the sampling feature.
- [Tools](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/docs/concepts/tools.mdx): Tools are a powerful primitive in the Model Context Protocol (MCP) that enable servers to expose executable functionality to clients. Through tools, LLMs can interact with external systems, perform computations, and take actions in the real world. Tools are uniquely identified by a name and can include descriptions to guide their usage as well as a defined input schema. MCP-enabled servers implement two handlers for tool management: listing available tools and handling tool execution. Best practices and security considerations for tool implementation are also covered.
- [Transports](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/docs/concepts/transports.mdx): This document describes transports in the Model Context Protocol (MCP), which handle communication between clients and servers. It covers the JSON-RPC message format used, built-in transport types like Standard Input/Output (stdio) and Server-Sent Events (SSE), and how to implement custom transports. The document also touches on error handling in transport implementations.
- [Debugging Model Context Protocol (MCP) Integrations](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/docs/tools/debugging.mdx): A comprehensive guide to effectively debugging Model Context Protocol (MCP) servers and their application integrations. It covers various tools like MCP Inspector and Claude Desktop Developer Tools, explains how to check server status, view logs, and use Chrome DevTools for detailed insights, and addresses common issues such as working directory and environment variable configurations. Additionally, the guide provides best practices for implementing logging, handling errors, and ensuring security, offering practical advice for efficient debugging workflows in the MCP ecosystem.
- [MCP Inspector](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/docs/tools/inspector.mdx): The MCP Inspector is an interactive developer tool for testing and debugging MCP (Model Context Protocol) servers. This guide explains how to install and use the Inspector to inspect servers from NPM or PyPi, or locally developed servers, and details its features like server connection, resources, prompts, tools, and notifications tabs. It also provides best practices for development workflow and testing edge cases.
- [Example Servers](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/examples.mdx): This page showcases various Model Context Protocol (MCP) servers that demonstrate the protocol's capabilities and versatility. These servers enable Large Language Models (LLMs) to securely access tools and data sources. The document provides reference implementations for data and file systems, development tools, web and browser automation, productivity and communication, and AI and specialized tools. It also lists official integrations and community-developed servers. Finally, it offers guidance on getting started with reference servers and configuring them with Claude, along with additional resources like the MCP Servers Repository and Awesome MCP Servers.
- [Introduction to the Model Context Protocol (MCP)](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/introduction.mdx): The Model Context Protocol (MCP) standardizes how applications provide context to Large Language Models (LLMs), similar to how USB-C connects devices to peripherals. It offers pre-built integrations, flexibility in LLM providers, and best practices for data security. MCP follows a client-server architecture, enabling hosts (like Claude Desktop) to connect to multiple servers that expose data sources or remote services. The document also provides quick starts for server and client developers, examples, tutorials, and details on core MCP concepts like resources, prompts, tools, and transports.
- [Build an MCP Client](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/quickstart/client.mdx): This tutorial guides you through building an LLM-powered chatbot client that connects to MCP servers. It covers setting up your development environment, connecting to a server, processing queries using Claude and available tools, and creating an interactive chat interface, with full example code provided.
- [For Server Developers](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/quickstart/server.mdx): This tutorial guides users through building a simple MCP weather server that exposes two tools: `get-alerts` and `get-forecast`, primarily focusing on tools but also introducing other core MCP concepts like resources and prompts. It covers setting up the environment, implementing tool execution, and running the server, with detailed instructions for Python and testing with Claude for Desktop. The tutorial assumes familiarity with Python and LLMs, and provides system requirements for the necessary software and SDKs.
- [For Claude Desktop Users](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/quickstart/user.mdx): This tutorial explains how to extend Claude for Desktop to interact with your computer's file system. It covers downloading and installing Claude for Desktop, adding the Filesystem MCP Server by modifying a configuration file, and restarting Claude to activate the new functionality. The guide also provides troubleshooting tips for common issues like servers not showing up or tool calls failing. You can learn to ask Claude to perform actions like writing and saving files, or moving images.
- [MCP Client](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/sdk/java/mcp-client.mdx): The MCP Client is a key component in the Model Context Protocol (MCP) architecture, responsible for establishing and managing connections with MCP servers. It handles protocol version negotiation, capability negotiation, message transport, JSON-RPC communication, tool discovery and execution, resource access and management, and prompt system interactions. The client provides both synchronous and asynchronous APIs, and transport layer implementations for various communication methods like STDIO and SSE. It also supports capabilities like roots management for filesystem access and sampling for LLM interactions.
- [Model Context Protocol (MCP) Java SDK Overview](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/sdk/java/mcp-overview.mdx): This document introduces the Model Context Protocol (MCP) Java SDK, detailing its features for standardized integration between AI models and tools, its layered architecture, and how to include it in Maven and Gradle projects using the provided dependencies and Bill of Materials (BOM). It also highlights breaking changes in version 0.8.x and offers guidance on migration.
- [MCP Server](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/sdk/java/mcp-server.mdx): The MCP Server is a foundational component in the Model Context Protocol (MCP) architecture. It exposes tools and resources, manages prompt requests, supports capability negotiation, and handles client connections. It offers both synchronous and asynchronous APIs and various transport providers like STDIO, SSE (WebFlux), SSE (WebMvc), and SSE (Servlet).
- [Introduction to Snippets](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/snippets/snippet-intro.mdx): The DRY (Don't Repeat Yourself) principle in software development also applies to documentation. Consider creating custom snippets to avoid repeating content and keep documentation synchronized.
- [Building a Model Context Protocol Client Node](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/tutorials/building-a-client-node.mdx): This document outlines the steps to build a client node for the Model Context Protocol (MCP). It covers system requirements, environment setup, API key configuration, and the creation of a TypeScript client to interact with MCP servers, including processing queries and handling tool calls. This client is designed to connect to either Python or JavaScript MCP servers and includes an interactive chat interface.
- [Building MCP with LLMs](https://raw.githubusercontent.com/modelcontextprotocol/docs/main/tutorials/building-mcp-with-llms.mdx): This guide explains how to use Large Language Models (LLMs), focusing on Claude, to develop custom Model Context Protocol (MCP) servers and clients. It covers preparing relevant documentation for the LLM, clearly describing the desired server functionality, and best practices for collaborating with the LLM throughout the development process. The guide also touches upon key MCP features that LLMs can help implement and steps for further development and iteration after initial server creation.
