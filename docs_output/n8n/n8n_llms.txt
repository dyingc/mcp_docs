# Document Index
- [n8n v1.0 Migration Checklist](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/1-0-migration-checklist.md): This document outlines the key changes, new features, deprecations, and breaking changes to be aware of when migrating to n8n version 1.0, including information on Python support, execution order, Docker changes, and updated data handling.
- [Light Evaluations](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/evaluations/light-evaluations.md): Light evaluations in n8n allow users to test workflows with small datasets by running examples one by one and writing outputs back to a Google Sheet. This process involves creating a dataset in Google Sheets, wiring it to the workflow using an evaluation trigger, configuring the workflow to write outputs back to the dataset, and then executing the evaluation to review results. This method is suitable for initial workflow development and testing, offering a visual comparison of outputs and serving as a precursor to more formal metric-based evaluations for larger datasets.
- [Metric-based evaluations](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/evaluations/metric-based-evaluations.md): This document describes metric-based evaluations in n8n, a feature available on Pro and Enterprise plans, which allows users to measure and track the performance of workflows on large datasets. It explains how to set up and run these evaluations, calculate various metrics, and interpret the results to ensure robust workflow performance.
- [AI Workflow Evaluations in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/evaluations/overview.md): This document outlines the importance and types of evaluations for AI workflows in n8n, distinguishing between light evaluation for pre-deployment testing and metric-based evaluation for post-deployment and production, emphasizing the challenges of evaluating LLMs and the need for comprehensive testing datasets.
- [Tips and Common Issues for n8n Advanced AI Evaluations](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/evaluations/tips-and-common-issues.md): This document provides solutions and tips for common challenges encountered when working with n8n's Advanced AI features, specifically focusing on workflow evaluations. It covers combining multiple triggers, avoiding evaluation breaking chat, accessing tool data for metrics, handling multiple evaluations, and dealing with inconsistent results.
- [Agent vs. Chain in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/examples/agent-chain-comparison.md): This document explains the differences between agents and chains in n8n workflows, highlighting how agents offer more power through decision-making and tool utilization. It details a demonstration workflow that routes chat queries to either an agent or a chain based on user input, and outlines the key n8n nodes used, such as Chat Trigger, Switch, Agent, and Basic LLM Chain. The guide also provides instructions on how to import and use the example workflow in an n8n instance, and explains the color-coding for sticky notes within the example.
- [Call an API to fetch data](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/examples/api-workflow-tool.md): This document describes how to use n8n to integrate data from any API with AI using a multi-workflow approach. It details the key features, including the Chat Trigger, Agent, and Call n8n Workflow Tool, and explains how to implement the example workflow by importing a JSON file into an n8n instance and following the provided Sticky Notes for guidance.
- [Chat with a Google Sheet using AI](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/examples/data-google-sheets.md): This document describes how to use n8n to integrate Google Sheets with AI for a chat interface. It leverages the Chat Trigger, Agent, and Call n8n Workflow Tool to enable AI to interact with and retrieve data from Google Sheets, providing a customizable chat experience.
- [Human Fallback for AI Workflows](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/examples/human-fallback.md): This document describes an n8n workflow designed to answer user queries using the GPT-4 model. If the AI cannot answer, it alerts a human via Slack and requests the user's email, providing a robust human fallback mechanism for AI workflows. The workflow integrates the Chat Trigger, Agent, and Call n8n Workflow Tool for interactive chat, AI decision-making, and custom tool integration, respectively. It also explains how to import and use the workflow, highlighting key features and providing guidance through color-coded sticky notes.
- [Advanced AI examples and concepts](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/examples/introduction.md): This document introduces advanced AI concepts and provides workflow templates with explanations and configuration guides. It covers agents, chains, the Call n8n Workflow Tool, vector databases, and memory in AI. The examples demonstrate common use cases and features of advanced AI in n8n, along with links to browse AI workflow templates.
- [Understanding AI Agents](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/examples/understand-agents.md): An AI agent is a decision-making chain that uses a language model to determine which actions to take, interacting with other agents and tools to respond to queries.
- [Understand Chains in AI](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/examples/understand-chains.md): This document explains what AI chains are, their components, and how n8n implements them. It details three n8n chain nodes: Basic LLM, Question and Answer, and Summarization, highlighting that n8n chains do not support memory, unlike other tools like LangChain.
- [Understanding AI Memory in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/examples/understand-memory.md): This document explains AI memory in the context of n8n, detailing how it maintains conversation history in AI chat services. It covers various memory options available in n8n, including Simple Memory and dedicated nodes for services like Motorhead, Redis, Postgres, Xata, and Zep. Additionally, it highlights the utility of the Chat Memory Manager node for advanced memory management and injecting contextual messages.
- [Understanding AI Tools in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/examples/understand-tools.md): This document explains what AI tools are, how they function as add-ons for AI to access extra context or resources, and highlights specific tools available in n8n like the Call n8n Workflow Tool, Custom Code Tool, and HTTP Request Tool, along with examples of their use.
- [Understand Vector Databases](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/examples/understand-vector-databases.md): This document explains what vector databases are using a simplified example. It also demonstrates the power of similarity search and lists other tools required for vector databases to function.
- [Using the $fromAI() Function for AI-driven Parameter Specification](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/examples/using-the-fromai-function.md): This document explains how to use the $fromAI() function in n8n to enable AI models to dynamically fill in parameters for app node tools connected to the Tools Agent. It covers both the automatic parameter filling feature and the manual use of the `$fromAI()` function with its various parameters and provides examples of its usage.
- [Populate a Pinecone vector database from a website](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/examples/vector-store-website.md): This document describes how to use n8n to scrape a website, load the data into Pinecone, and then query it using a chat workflow. It highlights the key n8n nodes used, such as HTTP, HTML, Pinecone Vector Store, and Embeddings OpenAI, along with instructions for importing and using the example workflow.
- [Tutorial: Build an AI Workflow in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/intro-tutorial.md): This tutorial guides users through building an AI-powered chat agent in n8n, covering fundamental AI concepts, integrating AI Agent and Chat Trigger nodes, connecting with chat models like OpenAI, and configuring credentials for a functional workflow.
- [LangChain learning resources](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/langchain/langchain-learning-resources.md): This page provides a curated list of learning resources for LangChain, including official documentation, conceptual guides, video tutorials, and community discussion platforms.
- [LangChain concepts in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/langchain/langchain-n8n.md): This document explains how LangChain concepts and features map to n8n nodes, detailing the LangChain-focused nodes available in n8n, which can be integrated into workflows to connect LangChain with other services.
- [Use LangSmith with n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/langchain/langsmith.md): This document explains how to connect your self-hosted n8n instance to LangSmith, a developer platform by LangChain. By setting specific environment variables with your LangSmith API key and restarting n8n, you can enable recording and monitoring of n8n runs within LangSmith. This integration helps users leverage LangSmith's tracing and monitoring capabilities for their n8n workflows.
- [LangChain in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai/langchain/overview.md): n8n integrates LangChain functionality through configurable nodes, allowing users to select agents, LLMs, and memory, and connect with other n8n nodes for diverse data sources and services. This enables the integration of LangChain logic with various data sources and services within n8n workflows. The documentation includes resources for learning LangChain concepts and explains how n8n represents these features.
- [n8n Advanced AI Documentation and Guides](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/advanced-ai.md): This document provides an overview of building AI functionality in n8n, covering topics such as creating chatbots, processing documents, and integrating with LangChain. It includes tutorials, starter kits, examples, and information on related resources like cluster nodes and workflow templates. The document also highlights the availability of AI features in n8n versions 1.19.4 and above for both Cloud and self-hosted environments.
- [Choose your n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/choose-n8n.md): This document outlines the different platforms, pricing plans, and licenses available for n8n, including n8n Cloud, self-hosting options, and the embeddable version, along with details on free and paid versions and licensing.
- [AI Coding in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/ai-code.md): This document explains how to use AI (ChatGPT) within the Code node in n8n for generating and transforming code. It covers feature availability, usage limits, limitations of the AI, and essential tips for writing effective prompts to ensure useful and accurate code generation.
- [Convenience Methods](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/builtin/convenience.md): This document outlines convenience methods provided by n8n to simplify common tasks within expressions, covering functionalities like evaluating expressions, handling empty values, and finding minimum/maximum values, with a clear distinction of their availability in Code nodes versus expressions.
- [Current Node Input in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/builtin/current-node-input.md): This document outlines methods for working with the current node's input in n8n, including available methods and variables for both JavaScript and Python, and their compatibility with the Code node.
- [Data Transformation Functions for Arrays in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/builtin/data-transformation-functions/arrays.md): This document outlines built-in convenience functions within n8n for performing data transformations on arrays using JavaScript expressions. It details functions like `average()`, `chunk()`, `compact()`, `difference()`, `intersection()`, `first()`, `isEmpty()`, `isNotEmpty()`, `last()`, `max()`, `merge()`, `min()`, `pluck()`, `randomItem()`, `removeDuplicates()`, `renameKeys()`, `smartJoin()`, `sum()`, `toJsonString()`, `union()`, and `unique()`, along with their parameters and examples for effective data manipulation within workflows.
- [Boolean Data Transformation Functions](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/builtin/data-transformation-functions/booleans.md): This document outlines built-in convenience functions for transforming boolean data within n8n expressions. It covers the `toInt()` function, which converts boolean values to numbers (false to 0, true to 1), and notes that other JavaScript can also be used in expressions.
- [n8n Dates: Data Transformation Functions](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/builtin/data-transformation-functions/dates.md): This document outlines built-in convenience functions for date data transformation within n8n expressions. It covers functions such as `beginningOf`, `endOfMonth`, `extract`, `format`, `isBetween`, `isDst`, `isInLast`, `isWeekend`, `minus`, `plus`, and `toDateTime`, detailing their parameters and usage for manipulating and evaluating date and time values.
- [n8n Number Data Transformation Functions](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/builtin/data-transformation-functions/numbers.md): This document is a reference for built-in convenience functions for number data transformation within n8n expressions. It covers functions like rounding (ceil, floor, round), formatting (format), checking parity (isEven, isOdd), and type conversion (toBoolean, toDateTime), providing details on parameters and usage.
- [Data Transformation Functions for Objects](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/builtin/data-transformation-functions/objects.md): This document provides a reference for built-in convenience functions in n8n for data transformation of objects within expressions. It details functions like `isEmpty()`, `merge()`, `hasField()`, `removeField()`, `removeFieldsContaining()`, `keepFieldsContaining()`, `compact()`, `toJsonString()`, and `urlEncode()`, all designed to manipulate and check object properties. The document also notes that any JavaScript can be used in expressions.
- [n8n Docs: String Data Transformation Functions](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/builtin/data-transformation-functions/strings.md): This document provides a reference for built-in convenience functions in n8n for transforming string data within expressions. It covers functions for encoding/decoding (base64, URL), extracting information (domain, email, URL, path), validating strings (isDomain, isEmail, isEmpty, isNumeric, isUrl), parsing (JSON), formatting (quoting, markdown removal, case conversion), and type conversion (boolean, date, number).
- [Data Transformation Functions](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/builtin/data-transformation-functions.md): This document describes data transformation functions available in n8n for use in expressions. It covers usage, syntax, and provides links to specific functions for different data types like arrays, dates, numbers, objects, and strings.
- [Date and time](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/builtin/date-time.md): This document outlines built-in methods for working with date and time in n8n, covering JavaScript and Python support, as well as the use of Luxon for date parsing and transformation functions for expressions.
- [HTTP node variables](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/builtin/http-node-variables.md): This document outlines variables available for working with HTTP node requests and responses in n8n, especially for pagination. It includes variables like `$pageCount`, `$request`, and `$response`, which can be used in expressions within the HTTP node.
- [JMESPath | n8n Docs](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/builtin/jmespath.md): This document describes the JMESPath method available in n8n for searching JSON objects. It outlines the `$jmespath()` method, its availability in the Code node, and mentions Python support within the Code node.
- [LangChain Code Node Methods](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/builtin/langchain-methods.md): This document outlines methods available within n8n's LangChain Code node for tasks such as managing input/output data, accessing node information, and handling execution cancellation.
- [n8n metadata](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/builtin/n8n-metadata.md): This document outlines methods for working with n8n metadata, including access to environment variables, workflow, execution, and node metadata, and information about instance variables and external secrets. It also details Python support in the Code node and provides a comprehensive table of available methods for both JavaScript and Python, along with their descriptions and applicability in the Code node.
- [Working with Output from Other Nodes in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/builtin/output-other-nodes.md): This document outlines methods and variables for handling output from other nodes within n8n, focusing on their availability in JavaScript and Python Code nodes. It details functions like .all(), .first(), .last(), .params, and .context for accessing node data, and differentiates between expressions and Code node usability. The document also highlights Python support within the Code node.
- [Built-in methods and variables in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/builtin/overview.md): This document provides a reference for built-in methods and variables available in n8n for data manipulation and access. It covers their use in expressions and considerations for the Code node, linking to specific examples and functions like date/time, HTTP node variables, and data transformation functions.
- [Using the Code node in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/code-node.md): The n8n Code node allows users to write custom JavaScript or Python code to execute as a step within workflows. It supports two execution modes: "Run Once for All Items" and "Run Once for Each Item." The node provides built-in methods and variables for interacting with n8n data and also allows for external npm modules in self-hosted environments. Recent updates include Python support (via Pyodide) and AI-assisted code generation for Cloud users.
- [n8n Docs: Node.all Function](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/builtin/all.md): Documentation for the n8n `("<node-name>").all()` method, explaining how to access all items from the current or parent nodes, with examples in JavaScript and Python.
- [n8n Workflow Execution Data](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/builtin/execution.md): This document outlines the `execution` object in n8n, which provides access to the unique ID of the current workflow execution, a URL to resume waiting workflows, and methods for managing custom data within the execution, primarily for use in the Code node.
- [getWorkflowStaticData](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/builtin/get-workflow-static-data.md): This document describes the `getWorkflowStaticData` function in n8n, which allows access to static workflow data for persistent storage of small data sets within a workflow. It explains the two types of static data, global and node, and provides examples of how to access, update, and delete this data in both JavaScript and Python. The document also notes that this is an experimental feature and has limitations regarding testing and high-frequency executions.
- [Item Matching in n8n Workflows](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/builtin/itemmatching.md): This document explains how to retrieve linked items from earlier nodes in an n8n workflow using the itemMatching function. It provides a detailed example of a workflow that extracts customer data, simplifies it, and then uses itemMatching to restore email addresses, demonstrating the function's utility in complex data manipulations.
- [The vars Keyword in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/builtin/vars.md): This document explains the usage and availability of the `vars` keyword in n8n, which provides read-only access to user-defined variables in the active environment. It also differentiates `vars` from `env`, which accesses configuration environment variables.
- [n8n Built-in Methods and Variables](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/builtin.md): This document provides examples and usage of n8n's built-in methods and variables, including 'execution', 'getWorkflowStaticData', 'itemmatching', '(node-name).all', and 'vars', for working with data and accessing n8n data within workflows.
- [Output to the Browser Console](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/code-node/console-log.md): This document explains how to output to the browser console using `console.log()` in JavaScript or `print()` in Python within the n8n Code node, and provides guidance on handling `[object Object]` outputs by checking and converting data types.
- [Get the binary data buffer](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/code-node/get-binary-data-buffer.md): This document explains how to access the binary data buffer in n8n for operations like data manipulation, calculations, and complex HTTP requests. It highlights the use of `getBinaryDataBuffer()` function and advises against older access methods. Note that this functionality is not available in Python.
- [Get Number of Items from Last Node](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/code-node/number-items-last-node.md): This document explains how to retrieve the number of items returned by the previous node in n8n workflows using both JavaScript and Python code examples. It also demonstrates the expected output format.
- [Code Node Cookbook](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/code-node.md): This document provides examples and recipes for using the Code node in n8n, covering tasks like getting the number of items from the last node, accessing binary data buffers, and outputting to the browser console. It also references related resources such as built-in methods, variables, and general Code node documentation.
- [Check incoming data](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/expressions/check-incoming-data.md): This document explains how to check incoming data in n8n workflows, particularly focusing on handling empty variables and providing fallback values. It demonstrates the use of ternary, nullish coalescing, and logical OR operators for conditional data handling.
- [Common Issues with n8n Expressions](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/expressions/common-issues.md): This document outlines common errors encountered when using expressions in n8n, such as 'JSON Output' containing invalid JSON, inability to retrieve data for expressions, and invalid syntax. It provides troubleshooting steps and advice on resolving these issues, including checking JSON validity, ensuring preceding nodes are executed, and verifying expression syntax.
- [Expressions Cookbook](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/expressions.md): The Expressions Cookbook provides examples and recipes for using expressions in n8n. It covers topics like checking incoming data and common issues. While n8n supports Python in the Code node, it is not available for use in expressions. The cookbook also links to related resources such as built-in methods, variables, and general expression documentation.
- [Pagination in n8n HTTP Request node](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/http-node/pagination.md): This document explains how to implement pagination in the n8n HTTP Request node, covering various methods such as using a URL from the response, navigating by page number, and setting page size. It details the configuration steps for different pagination modes and provides examples using n8n expressions like $response and $pageCount.
- [HTTP Request Node Examples](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/http-node.md): This document provides examples and related resources for using n8n's HTTP Request node, a versatile tool for making HTTP requests to query data from any app or service with a REST API, including information on pagination.
- [Query JSON with JMESPath](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/jmespath.md): Learn how to use JMESPath, a query language for JSON, within n8n to extract and transform data. This guide covers the n8n custom `jmespath()` method, its syntax, and practical examples for common tasks like applying projections and selecting multiple elements.
- [Date and time with Luxon](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/cookbook/luxon.md): This document explains how to work with date and time in n8n using the Luxon JavaScript library. It covers parsing date strings, using n8n's custom Luxon variables like `now` and `today`, and performing common date operations such as adding/subtracting days and formatting dates for human readability. The document also highlights differences in Luxon and vanilla JavaScript date handling and how timezones are managed within n8n workflows.
- [n8n Expressions](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/expressions.md): Expressions in n8n allow dynamic parameter setting in nodes using data from previous executions, workflows, or the n8n environment, and support JavaScript execution for data manipulation. They leverage a templating language called Tournament, with custom methods, variables, and data transformation functions, and integrate with Luxon for date/time handling and JMESPath for JSON querying. Users can write expressions directly in parameters or use an expression editor, and common issues are addressed in a dedicated section.
- [Custom Variables in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code/variables.md): This document describes how to create, edit, delete, and use custom variables in n8n workflows. These read-only variables are available on Self-hosted Enterprise and Pro Cloud plans and can be used to store and reuse values across an n8n instance. Variables are shared among all users and can be accessed in the Code node and expressions, though they are read-only and must be managed through the UI, behaving as undefined if no value is set.
- [Code in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/code.md): n8n is a low-code tool that allows users to perform many tasks without code, while also providing options to integrate code when needed. This includes using expressions and a dedicated Code node within workflows for JavaScript or Python. Additionally, n8n offers various technical resources such as core nodes for API requests, webhooks, and file handling, as well as features for building complex flow logic. Users can also leverage the n8n API, self-host the platform, and create custom nodes.
- [Navigating the n8n Editor UI](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-one/chapter-1.md): This document provides a comprehensive guide to navigating the n8n Editor UI, covering its layout, settings, and functionalities like the left-side panel, top bar, and canvas. It explains how to set up n8n and introduces users to different node types and methods for finding and adding nodes within the workflow editor.
- [Building a Mini-workflow](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-one/chapter-2.md): This lesson guides users through building a small workflow to fetch 10 articles about automation from Hacker News. It covers adding and configuring Manual Trigger and Hacker News nodes, executing the workflow, and saving it with a new name. The process includes detailed steps on setting parameters, understanding execution outputs, and utilizing notes for better workflow management.
- [Automating a Real-World Use Case with n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-one/chapter-3.md): This document outlines a scenario where an Analytics Manager, Nathan, seeks to automate his repetitive and error-prone weekly sales reporting using n8n, leveraging API endpoints from a legacy data warehouse to sum booked orders for Discord announcements and create spreadsheets of processing orders for Sales Managers.
- [Designing the workflow](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-one/chapter-4.md): This document outlines the steps to design an automated workflow using n8n, focusing on extracting, filtering, calculating, and sending data from a data warehouse to Discord and Airtable. It details the process, from getting relevant data to scheduling the workflow, and provides a series of eight steps to build the workflow. Credentials for external services are required and signup information for the course is provided.
- [Getting data from the data warehouse](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-one/chapter-5/chapter-5.1.md): This document explains how to retrieve data from a data warehouse using the HTTP Request node in n8n workflows. It covers creating a new workflow, adding and configuring an HTTP Request node with authentication and headers, and executing the node to retrieve data.
- [Inserting Data into Airtable with n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-one/chapter-5/chapter-5.2.md): This document explains how to insert data into Airtable using the n8n Airtable node. It covers configuring the Airtable table, adding and configuring the Airtable node in n8n, and testing the integration to ensure data is successfully inserted.
- [Filtering Orders](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-one/chapter-5/chapter-5.3.md): This document explains how to filter orders using n8n's If node. It details configuring the If node with expressions, connecting it to other nodes, and testing the workflow to process only relevant data. The content also emphasizes the importance of filtering data for efficiency and performance.
- [Setting Values for Processing Orders](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-one/chapter-5/chapter-5.4.md): This document explains how to use the Edit Fields (Set) node in n8n to select and set data, specifically employeeName and orderID, before transferring it to Airtable for processing orders. It details adding and configuring the node, mapping fields, and updating Airtable to receive the data.
- [Calculating Booked Orders in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-one/chapter-5/chapter-5.5.md): This document explains how to use the Code node in n8n to calculate the total number and value of booked orders using custom JavaScript. It details the Code node's operational modes ("Run Once for All Items" and "Run Once for Each Item") and the expected JSON data structure within n8n workflows. The guide provides a practical example of configuring the Code node with JavaScript to perform calculations and demonstrates the correct data return format for n8n. It also briefly mentions the option to use Python in the Code node.
- [Notifying the Team](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-one/chapter-5/chapter-5.6.md): This document explains how to send messages to a Discord channel using the Discord node in n8n, including configuration steps and an example of a message integration. It also mentions alternative communication app nodes like Slack and Mattermost.
- [Scheduling the Workflow](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-one/chapter-5/chapter-5.7.md): This document explains how to schedule an n8n workflow to run automatically at a set time or interval using the Schedule Trigger node. It details replacing the Manual Trigger node with a Schedule Trigger node, configuring its parameters for weekly execution on Monday mornings, and connecting it to the HTTP Request node. The document also highlights the importance of setting the correct timezone for accurate scheduling.
- [Activating and Examining the Workflow](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-one/chapter-5/chapter-5.8.md): This document outlines how to activate workflows, view workflow executions, and configure workflow settings within n8n. It covers activating workflows, monitoring execution status and details, and customizing settings like error handling, timezone, and execution data saving.
- [Exporting and Importing Workflows](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-one/chapter-6.md): This document explains how to export and import n8n workflows as JSON files, enabling sharing and re-use. It covers methods using the Editor UI menu, Editor UI canvas, and command line, and includes a warning about sharing credentials within exported files.
- [Test Your n8n Knowledge - Level 1 Course Completion](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-one/chapter-7.md): This document outlines how to test your knowledge after completing the n8n Course Level 1, including details about a quiz to assess understanding of theoretical concepts and workflows. It also offers resources for continued learning and workflow inspiration, such as the n8n blog, YouTube channel, community forum, and Discord server, and encourages users to proceed to n8n Course Level 2.
- [n8n Course: Level 1 Introduction](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-one.md): This course, part of the n8n documentation, introduces fundamental n8n concepts, helping users develop low-code automation expertise by guiding them through building workflows and understanding data structures for personal or professional use.
- [Understanding n8n Data Structure](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-two/chapter-1.md): This document explains the fundamental data structure within n8n workflows, focusing on the use of arrays of objects. It details how nodes process data as items and how to use the Code node to create, manipulate, and transform data sets by referencing node data and structuring it correctly for n8n. The document also provides exercises for practical application of these concepts, including handling nested data and combining/splitting items.
- [Processing different data types](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-two/chapter-2.md): This chapter of the n8n Docs explains how to process different data types in n8n workflows, including HTML, XML, date, time, and interval data. It provides practical exercises for each data type, demonstrating how to use n8n nodes like HTML, XML, Date & Time, Wait, and Schedule Trigger nodes.
- [Merging and Splitting Data in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-two/chapter-3.md): This chapter from the n8n Docs explains how to merge (combine) and split data within n8n workflows, detailing the various merge options available in the Merge node, including "Append," "Combine" (by fields, position, or all combinations), and "Choose Branch." It also touches upon data synchronization concepts like one-way and two-way sync, and provides a practical exercise to demonstrate data merging.
- [Dealing with Errors in n8n Workflows](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-two/chapter-4.md): This document explains how to troubleshoot and handle errors in n8n workflows. It covers checking failed workflows in the Executions log, creating and configuring error workflows using the Error Trigger node, and intentionally throwing exceptions with the Stop and Error node for data validation.
- [Automating a Business Workflow with n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-two/chapter-5/chapter-5.0.md): This chapter outlines how to automate a complex business workflow using n8n for Nathan, who needs to generate sales reports from disparate data sources. The solution involves three interconnected n8n workflows for data merging, report generation, and error monitoring, utilizing integrations like Airtable, Google (Gmail), and Discord.
- [Workflow 1: Merging Data in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-two/chapter-5/chapter-5.1.md): This document outlines a workflow in n8n to merge customer data from Airtable with regional information from the REST Countries API. It details the steps using Airtable, HTTP Request, and Merge nodes to enrich customer records with region and subregion data. The document also includes quiz questions related to the workflow and its output.
- [Workflow 2: Generating reports](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-two/chapter-5/chapter-5.2.md): This document outlines "Workflow 2" which focuses on generating reports by merging and transforming data from various sources (HTTP Request, Airtable). The workflow is broken into three parts: gathering data, generating regional sales reports as files and sending notifications, and finally, generating total sales reports in batches and sending notifications about them. It includes detailed steps for configuring nodes like HTTP Request, Airtable, Merge, Sort, If, Convert to File, Gmail, Discord, Loop Over Items, Set, and Date & Time, along with quiz questions for each section.
- [Workflow 3: Monitoring Workflow Errors in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-two/chapter-5/chapter-5.3.md): This document outlines how to create an n8n error workflow to monitor the main workflow. It details steps for setting up an Error Trigger node and a Discord node to send alerts, including information on the failed workflow, error message, and execution URL. It also provides quiz questions related to the Error Trigger node.
- [Test your knowledge](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-two/chapter-6.md): This document is the final chapter of the n8n Course Level 2, offering a quiz to test knowledge on workflow automation and complex business workflows. It outlines quiz rules, provides a link to take the quiz, and suggests next steps for users, including creating new workflows and exploring additional n8n features through their documentation and community resources.
- [n8n Course Level 2 Introduction](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses/level-two.md): This document introduces the n8n Course Level 2, outlining its target audience, learning objectives centered on data handling and error workflows, necessary prerequisites like n8n setup and basic JavaScript, course duration (approx. 2 hours), and completion milestones (building a workflow and passing a quiz).
- [n8n Text Courses](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/courses.md): This document introduces the n8n automation tool and explains that it can automate repetitive tasks without requiring advanced technical knowledge or coding skills through its no-code interface. It lists two available courses: a Level 1 Beginner course and a Level 2 Intermediate course.
- [n8n Credentials](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/credentials.md): This document explains what credentials are in n8n, how to access the credentials UI, and how to create, edit, and share credentials. It also links to information on setting up credentials for specific services.
- [n8n Data Documentation](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/data.md): This document explains the concept of "data" within n8n, covering data structures, flow, transformation, and processing using code. It highlights the importance of understanding data for creating custom nodes, writing expressions, and using specific n8n nodes, and lists and describes various data transformation nodes available in n8n.
- [n8n Embed Documentation and Guides](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/embed.md): n8n Embed is a white-labeling and integration solution for n8n, enabling its incorporation into commercial products. This documentation provides information on its usage. Support is available through the community forum and direct n8n support for licensed customers. n8n Embed is not available in Russia and Belarus.
- [External Secrets for n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/external-secrets.md): This document describes how to use external secret stores like AWS Secrets Manager, Azure Key Vault, GCP Secrets Manager, Infisical, and HashiCorp Vault with n8n to manage credentials and enhance security. It covers connecting n8n to these secret stores, configuring access, and using the stored secrets within n8n credentials. The document also provides specific instructions and IAM policy examples for each supported secret store.
- [Flow Logic](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/flow-logic.md): This document describes how to represent complex logic in n8n workflows, covering splitting with conditionals, merging, looping, waiting, sub-workflows, error handling, and execution order in multi-branch workflows. It also references relevant core nodes like IF, Switch, Merge, and Wait, along with data concepts.
- [n8n Glossary](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/glossary.md): This document provides a glossary of terms used in n8n, covering concepts related to AI, APIs, and various components and functionalities within the n8n platform.
- [n8n Self-Hosting Documentation](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/hosting.md): This document provides comprehensive guidance on self-hosting n8n, covering installation, configuration, user management, scaling, security, and starter kits. It differentiates between the free Community Edition and the paid Enterprise Edition. The documentation emphasizes the technical expertise required for self-hosting and recommends n8n Cloud for less experienced users.
- [n8n Docs: Workflow Automation and Integrations](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/index.md): n8n documentation provides guides for setup, usage, and development of n8n, a fair-code licensed workflow automation tool with AI capabilities that allows users to connect applications with APIs and manipulate data with low-code, offering customizable, convenient, and privacy-focused solutions through various deployment options.
- [Insights](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/insights.md): The Insights feature in n8n provides instance owners and admins with visibility into workflow performance over time, offering a summary banner, a detailed dashboard with per-workflow metrics, and the ability to track time saved by automated workflows. This feature helps users understand the efficiency and ROI of their n8n automations, with different levels of detail available based on their n8n plan.
- [n8n Integrations Documentation and Guides](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/integrations.md): n8n integrations, called nodes, are the building blocks of workflows and can be an entry, processing, or exit point for data; n8n offers built-in, community, and credential-only nodes, and you can also use the HTTP Request node for generic integrations or custom operations.
- [Keyboard Shortcuts | n8n Docs](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/keyboard-shortcuts.md): This document outlines the various keyboard shortcuts available in n8n for workflow controls, canvas navigation and manipulation, node panel interactions, and actions within nodes, aiming to enhance user efficiency.
- [n8n Learning Path](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/learning-path.md): This page outlines a series of tutorials and resources designed to help users get started with n8n, covering community engagement, setup, quickstarts, structured courses, self-hosting, node building, and staying updated with n8n.
- [License Key](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/license-key.md): This document explains how to activate a license key for n8n, either through the UI or by setting environment variables, to enable certain licensed features. It also advises on allowlisting Cloudflare IP addresses for the license server.
- [Log Streaming](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/log-streaming.md): Log streaming in n8n allows users to send events to external logging tools, enabling centralized monitoring and alerting. It is available on Enterprise Self-hosted and Cloud plans. Users can configure event destinations (syslog, webhook, Sentry) and select specific events to stream, including workflow, node execution, audit, and AI node logs. Self-hosted users can further configure log streaming via environment variables.
- [n8n Privacy and Security](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/privacy-security.md): n8n is committed to the privacy and security of your data. This section outlines key policies and procedures for handling and securing data. Contact privacy@n8n.io for data privacy questions and security@n8n.io for security-related questions or to report vulnerabilities. The document also includes links to related topics such as Privacy, Security, Incident response, and What you can do.
- [n8n Documentation](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/reference.md): This documentation provides information on n8n, a fair-code licensed workflow automation tool with AI capabilities, covering setup, usage, and development, and offering quickstarts, integration options, and guides for building AI functionality.
- [n8n Release Notes](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/release-notes.md): This document provides release notes for n8n, covering new features, bug fixes, and updates across different versions. It includes details on semantic versioning, how to update n8n, and highlights significant changes such as the "Convert to sub-workflow" feature and API support for assigning users to projects.
- [Source Control and Environments in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/source-control-environments.md): This document explains how n8n uses Git-based source control to support multiple environments. It covers understanding environments and Git integration, setting up source control, using push/pull operations and copying work between instances, and a tutorial for creating environments. This feature is available on n8n Enterprise and requires specific user roles for setup.
- [Sustainable Use License](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/sustainable-use-license.md): This document outlines n8n's Sustainable Use License (SUL) and n8n Enterprise License, both based on the fair-code model. It details what the SUL covers, what is and isn't allowed under it, and answers frequently asked questions regarding its use, including why n8n chose this license over traditional open-source options.
- [Try it out](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/try-it-out.md): This page introduces users to n8n through tutorials, including a "First Workflow" guide, an AI chat agent building tutorial, and links to more extensive courses.
- [User management](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/user-management.md): User management in n8n allows you to invite people to work in your n8n instance. It includes login and password management, adding and removing users, and three account types: Owner, Member, and Admin (for Pro & Enterprise plans). This feature does not send personal information to n8n. This section contains setup guides for both Cloud and self-hosted n8n instances, including configuring LDAP and SAML.
- [n8n Video Courses](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/video-courses.md): n8n offers two YouTube video courses, Beginner and Advanced, covering topics from basic workflows and APIs to advanced technical nodes, error handling, and enterprise features, ideal for users looking to learn and master n8n.
- [Connections](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/components/connections.md): This document explains how to create and delete connections between nodes in a workflow. Connections link nodes to route data, passing information from one node's output to another node's input. The document includes a GIF example and step-by-step instructions for creating and deleting connections.
- [Nodes](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/components/nodes.md): Nodes are the fundamental building blocks of workflows in n8n, used for starting workflows, fetching, sending, processing, and manipulating data. This document outlines how to add nodes to a workflow, the two types of node operations (triggers and actions), and the various node controls and settings available for customizing node behavior and documenting workflows.
- [Sticky Notes](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/components/sticky-notes.md): This document describes how to use Sticky Notes in n8n workflows to annotate and comment on them, including creation, editing, color changes, positioning, and Markdown formatting.
- [Workflow Components](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/components.md): This document outlines the key components of n8n workflows: nodes for integrations and operations, connections to link nodes, and sticky notes for documentation. It serves as a guide to understanding the building blocks of automated processes within the n8n platform.
- [Create and Run Workflows in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/create.md): This document explains how to create and manage workflows in n8n. It covers creating new workflows, choosing between personal space or projects, and adding a trigger node. Additionally, it details how to run workflows both manually and automatically by activating or deactivating them.
- [All Executions](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/executions/all-executions.md): This document describes how to view and filter all executions in n8n, including information on project-specific executions, deleted workflows, and filtering options by workflow, status, and custom data. It also explains how to retry failed workflow executions and load data from previous executions for debugging purposes. Certain features like custom executions data are limited to specific n8n versions and editions.
- [Custom Executions Data](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/executions/custom-executions-data.md): This document explains how to set and access custom data within n8n workflow executions using either the Code node or the Execution Data node, enabling filtering of execution lists and retrieval of data within workflows.
- [Debug and Re-run Past n8n Executions](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/executions/debug.md): This document explains how to debug and re-run past executions in n8n, a feature available on n8n Cloud and registered Community plans, by loading data from previous executions into the current workflow to fix failed production executions.
- [Manual, Partial, and Production Executions n8n Docs](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/executions/manual-partial-and-production-executions.md): This document explains the differences between manual, partial, and production executions in n8n workflows. It covers how to use manual executions for testing, partial executions for specific steps, and how production executions are automatically triggered. The document also provides troubleshooting tips for common issues encountered during partial executions.
- [Workflow-level Executions](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/executions/single-workflow-executions.md): This document describes how to view and manage workflow-level executions in n8n, including filtering, retrying failed executions, and understanding the difference between execution history and workflow history. It explains how to access the Executions tab, discusses filtering options such as status, start time, and custom data, and outlines the process for retrying failed workflows with either the currently saved or original workflow version.
- [Executions](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/executions.md): n8n workflows can be run in two modes: manual, for testing, and production, for automatic execution. n8n provides two execution lists: workflow-level and all executions. You can also add custom data to executions.
- [Export and import workflows](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/export-import.md): This document outlines various methods for exporting and importing workflows in n8n, a workflow automation tool. Workflows are saved in JSON format, and users can copy-paste, use the Editor UI menu (Download, Import from URL, Import from File), or utilize command-line options for managing them. It also highlights the importance of protecting sensitive information like credentials when sharing exported workflows.
- [Workflow History in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/history.md): This document explains workflow history in n8n, outlining its availability based on user plans. It details how new versions are created, distinguishes workflow history from execution history, and provides instructions on viewing, restoring, and copying previous workflow versions within the platform.
- [Workflow Settings in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/settings.md): This document outlines the various workflow settings available in n8n, including execution order, error workflow, callable by other workflows, timezone, and options for saving production and manual executions, as well as execution progress and timeout settings.
- [Workflow Sharing in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/sharing.md): This document outlines how to share workflows between users within the same n8n instance, covering the process of sharing, viewing shared workflows, and understanding workflow roles, permissions, and credential implications.
- [Workflow Tags in n8n](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/tags.md): This document describes how to use workflow tags in n8n to organize and filter workflows. It covers adding tags to workflows, filtering workflows by tags, and managing existing tags, noting that tags are global within an n8n instance.
- [n8n Workflow Templates](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/templates.md): This document outlines how to use, access, and manage workflow templates in n8n, including submitting custom workflows to the n8n template library and configuring template settings for self-hosted instances. It details the API endpoints and data schema for integrating custom template libraries, offering guidance on creating and implementing personalized template solutions.
- [Workflow ID](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows/workflow-id.md): This document explains how to find the workflow ID in n8n, which is available in the URL of the open workflow and the workflow settings title.
- [Workflows](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/n8n/workflows.md): This document introduces workflows in n8n, explaining they are interconnected nodes designed for process automation. It covers creating workflows, utilizing templates, understanding key components, debugging with execution lists, and sharing workflows among users. Additionally, it directs new users to quickstart guides for hands-on experience with n8n features.
