# Document Index
- [n8n v1.0 Migration Guide](https://rawhubusercontent.com/dyingc/mcp_docs/main/1-0-migration-checklist.md): This document provides a summary of what you should be aware of before updating to version 1.0 of n8n, covering new features, deprecations, and breaking changes such as Python support, new execution order, removal of MySQL/MariaDB support, Docker changes, and mandatory user management. It also notes changes to custom node directories, WebSockets, date transformation functions, and execution data retention.
- [Light evaluations](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/evaluations/light-evaluations.md): Light evaluations in n8n allow users to test workflows with a small number of examples, writing the outputs back to a Google Sheet dataset for visual comparison with expected results. This process involves creating a dataset, connecting it to the workflow via an evaluation trigger, and configuring the workflow to write outputs back to the dataset using the evaluation node, before running the evaluation to review results.
- [Metric-based evaluations](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/evaluations/metric-based-evaluations.md): This document explains metric-based evaluations in n8n, a feature available on Pro and Enterprise plans, which allows users to measure and track workflow performance over large datasets. It details how to set up, calculate, and implement metrics, often involving AI and reference outputs, to analyze workflow effectiveness.
- [Evaluations | n8n Docs Overview](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/evaluations/overview.md): This document introduces evaluations as a crucial technique for ensuring the reliability of AI workflows, both during the building phase and after deployment. It explains that evaluations involve running a test dataset through a workflow to test performance, make changes confidently, and compare performance across models or prompts. The document differentiates between light evaluation (pre-deployment, smaller datasets) and metric-based evaluation (post-deployment, larger datasets with numeric metrics), highlighting their respective uses and characteristics.
- [Tips and Common Issues for N8n Advanced AI Evaluations](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/evaluations/tips-and-common-issues.md): This document provides tips and solutions for common issues encountered when working with Advanced AI Evaluations in n8n, covering topics such as combining multiple triggers, avoiding evaluation breaking chat, accessing tool data, handling multiple evaluations, and dealing with inconsistent results.
- [Agents vs Chains: A Comparison](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/examples/agent-chain-comparison.md): This document explains the differences between AI agents and chains using a workflow example. It highlights how agents are more powerful, detailing the use of a Chat Trigger, Switch node, Agent, and Basic LLM Chain. The document also provides instructions on how to use the example workflow in an n8n instance.
- [Call an API to fetch data](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/examples/api-workflow-tool.md): This document describes how to use n8n to integrate data from any API with your AI, using a two-workflow approach. The first workflow uses a Chat Trigger for the chat interface and the Call n8n Workflow Tool to invoke a second workflow. The second workflow refines the API request using AI based on the user's query, providing a mechanism for AI models to access external information beyond their training data.
- [Chat with a Google Sheet using AI](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/examples/data-google-sheets.md): This document describes an n8n workflow for chatting with a Google Sheet using AI. It utilizes features like the Chat Trigger, Agent, and Call n8n Workflow Tool to enable AI interaction with external data. The document also provides instructions on how to use the example workflow.
- [Human Fallback for AI Workflows](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/examples/human-fallback.md): This document describes an n8n workflow that uses GPT-4 to answer user queries and, if unsuccessful, escalates to a human via Slack, prompting for an email address. Key features include the Chat Trigger for interaction, an Agent for decision-making, and the Call n8n Workflow Tool for custom actions.
- [Advanced AI examples and concepts](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/examples/introduction.md): This document introduces advanced AI concepts and provides workflow templates with explanations and configuration guides. It covers agents, chains, tools, vector databases, and memory in AI. The examples demonstrate common use cases and different features of advanced AI in n8n, also providing links to browse more AI templates.
- [What's an agent in AI?](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/examples/understand-agents.md): This document explains what an AI agent is, distinguishing it from a chain by its decision-making capabilities. It describes how agents use language models to choose actions and interact with other agents and tools, adapting to specific queries and prompts. The document also touches on how agents function within n8n, highlighting the Agent node and its ability to act as different agent types, executing multiple runs within a workflow.
- [Understand Chains in AI](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/examples/understand-chains.md): This document explains what AI chains are, how they function by connecting different AI components, and specifically details the three types of chain nodes available in n8n (Basic LLM, Question and Answer, and Summarization), highlighting the key difference that n8n chains do not support memory, unlike in other tools like LangChain.
- [Understanding AI Memory in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/examples/understand-memory.md): This document explains AI memory in n8n, its role in maintaining conversation history, and the various memory options available, including Simple Memory and dedicated memory services like Motorhead, Redis Chat Memory, Postgres Chat Memory, Xata, and Zep, along with advanced management using the Chat Memory Manager node.
- [What's a tool in AI?](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/examples/understand-tools.md): This document defines AI tools as addons that provide extra context or resources, similar to functions an AI model can call. It specifically highlights n8n's tool sub-nodes, explaining their use and listing powerful tools like Call n8n Workflow, Custom Code, and HTTP Request tools, along with examples.
- [Understand Vector Databases](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/examples/understand-vector-databases.md): This document explains vector databases, which store data as high-dimensional vectors for fast and accurate similarity searches. It provides a simplified example of how data is represented as vectors and demonstrates the power of similarity search using a food discovery demo. The document also introduces related concepts such as embeddings, retrievers, text splitters, and document loaders, which are necessary for vector databases to function.
- [Using the $fromAI() Function](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/examples/using-the-fromai-function.md): This document explains how to use the $fromAI() function in n8n to let AI models automatically fill in tool parameters. It covers two methods: letting the model fill in the parameter directly or using the $fromAI() function in expressions. The document also details the parameters accepted by the $fromAI() function and provides examples of its usage.
- [Populate a Pinecone vector database from a website using n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/examples/vector-store-website.md): This document describes an n8n workflow for populating a Pinecone vector database by scraping website data using HTTP and HTML nodes, and then transforming and storing the data using the Pinecone Vector Store and Embeddings OpenAI nodes. It also highlights how to query the database using a Chat Trigger and Question and Answer Chain.
- [Tutorial: Build an AI chat agent in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/intro-tutorial.md): This tutorial guides users through building an AI-powered chat agent in n8n, covering fundamental AI concepts, using the AI Agent node, connecting with AI models like OpenAI, configuring credentials, and testing the workflow.
- [LangChain learning resources](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/langchain/langchain-learning-resources.md): This document provides a curated list of learning resources for LangChain, including official documentation, articles, and video tutorials, aimed at helping users understand key concepts and use cases.
- [LangChain concepts in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/langchain/langchain-n8n.md): This page details how LangChain concepts and features are implemented within n8n nodes, providing a comprehensive list of LangChain-focused nodes available in n8n, including various LangChain features, and links to relevant LangChain documentation for deeper understanding.
- [Use LangSmith with n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/langchain/langsmith.md): Learn how to connect your n8n instance to LangSmith for recording and monitoring runs. This guide provides steps on obtaining an API key from LangSmith and setting the necessary environment variables (LANGCHAIN_ENDPOINT, LANGCHAIN_TRACING_V2, and LANGCHAIN_API_KEY) in your n8n hosting environment. It also highlights that this feature is available for self-hosted n8n instances only and advises restarting n8n after configurationchanges.
- [LangChain in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai/langchain/overview.md): n8n offers configurable nodes that implement LangChain's functionality, allowing users to select their preferred agent, LLM, and memory, and integrate LangChain logic with other data sources and services.
- [n8n Advanced AI Documentation and Guides](https://rawhubusercontent.com/dyingc/mcp_docs/main/advanced-ai.md): This document provides an overview of building AI functionality within n8n, including creating chatbots, processing documents, and integrating with LangChain. It offers tutorials, starter kits, examples, and templates for AI workflows, along with details on related resources like Cluster nodes and the Chat Trigger. The features are available in n8n version 1.19.4 and above, for both Cloud and self-hosted environments.
- [Choose your n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/choose-n8n.md): This document provides an overview of n8n's different platforms (Cloud, Self-host, Embed), licensing models (Sustainable Use and Enterprise), and available free and paid versions, offering guidance on choosing the best n8n solution based on user needs and technical expertise.
- [AI Coding with GPT in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/ai-code.md): This document outlines how to use AI (specifically, ChatGPT) within n8n's Code node for generating JavaScript code. It covers feature availability, usage and limitations, and provides guidance on writing effective prompts with examples for data manipulation and transformation.
- [Convenience methods](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/builtin/convenience.md): n8n provides convenience methods to simplify common tasks in expressions, including `$evaluateExpression`, `$ifEmpty`, `$if`, `$max`, and `$min`. These methods help users manage data and logic within n8n workflows, with some available in the Code node and others exclusively for expressions.
- [Current Node Input](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/builtin/current-node-input.md): This document outlines methods for working with the input of the current node in n8n, including various `$input` and `_input` properties and their availability in the Code node. It covers accessing individual items, all items, first/last items, query parameters, and JSON/binary data. The document also mentions Python support in the Code node and provides details on context properties for the Loop Over Items node.
- [n8n Data Transformation Functions for Arrays](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/builtin/data-transformation-functions/arrays.md): This document provides a reference for built-in convenience functions in n8n for data transformation in expressions, specifically for arrays. It lists functions such as `average()`, `chunk()`, `compact()`, `difference()`, `intersection()`, `first()`, `isEmpty()`, `isNotEmpty()`, `last()`, `max()`, `merge()`, `min()`, `pluck()`, `randomItem()`, `removeDuplicates()`, `renameKeys()`, `smartJoin()`, `sum()`, `toJsonString()`, `union()`, and `unique()`, along with their parameters and descriptions.
- [Booleans](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/builtin/data-transformation-functions/booleans.md): This document outlines built-in convenience functions for data transformation of boolean values within n8n expressions, including conversion of booleans to numbers using `toInt()`.
- [Date Transformation Functions in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/builtin/data-transformation-functions/dates.md): This document outlines built-in convenience functions within n8n for transforming date data using expressions. These functions allow users to manipulate dates by extracting parts, formatting them, checking for ranges or specific days (like weekends or during DST), and adding or subtracting time periods, supporting both JavaScript Date and Luxon Date objects.
- [n8n Number Data Transformation Functions](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/builtin/data-transformation-functions/numbers.md): This document provides a reference for built-in convenience functions in n8n for transforming number data within expressions. It details functions for rounding (ceil, floor, round), formatting (format), checking parity (isEven, isOdd), and type conversion (toBoolean, toDateTime).
- [n8n Data Transformation Functions for Objects](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/builtin/data-transformation-functions/objects.md): This document outlines built-in JavaScript functions for transforming objects within n8n expressions. It covers functions like isEmpty(), merge(object), hasField(fieldName), removeField(key), removeFieldsContaining(value), keepFieldsContaining(value), compact(), toJsonString(), and urlEncode(), providing details on their usage and parameters.
- [n8n Built-in String Transformation Functions](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/builtin/data-transformation-functions/strings.md): This document provides a reference of built-in convenience functions for string data transformation within n8n expressions. It covers functions for encoding, decoding, extracting, checking, parsing, formatting, and converting strings, including operations like base64 encoding/decoding, domain/email/URL extraction, string hashing, case conversion, and type conversions to boolean, date, and numbers.
- [Data Transformation Functions](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/builtin/data-transformation-functions.md): This document describes data transformation functions available in n8n expressions, including how to use them with JavaScript. It lists function categories for different data types such as Arrays, Dates, Numbers, Objects, and Strings, and provides a usage example for string validation.
- [Date and time | n8n Docs](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/builtin/date-time.md): This document outlines built-in methods for working with date and time in n8n, covering both JavaScript and Python support. It details the `$now` and `$today` methods, which provide current timestamps as Luxon objects, and emphasizes the need for parsing date strings with Luxon due to n8n's string-based date passing.
- [HTTP Node Variables](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/builtin/http-node-variables.md): This document outlines variables available for working with HTTP node requests and responses in n8n, especially for pagination. It lists `$pageCount`, `$request`, and `$response` variables and their uses, along with references to further guidance on HTTP node configuration and pagination examples.
- [JMESPath](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/builtin/jmespath.md): This document describes the JMESPath method available in n8n, a tool for searching JSON objects using JMESPath. It details the `$jmespath()` method, its availability in the Code node, and how it can be used for data manipulation within n8n workflows. While Python is supported in the Code node, it is not available in expressions.
- [LangChain Code Node Methods](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/builtin/langchain-methods.md): This document outlines the methods available for use within the LangChain Code node in n8n, including functions for adding and retrieving input/output data, accessing node information, and handling execution cancellation.
- [n8n metadata](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/builtin/n8n-metadata.md): This document outlines methods for working with n8n metadata, including access to environment variables, workflow, execution, and node metadata, and information about instance variables and external secrets. It also details Python support within the Code node and provides a comprehensive table of available methods for interacting with n8n metadata.
- [Output of other nodes](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/builtin/output-other-nodes.md): This document describes methods for working with the output of other nodes in n8n. It covers methods for retrieving items, parameters, and context from other nodes, and specifies which methods are available in the Code node versus expressions. Both JavaScript and Python methods are detailed.
- [Built-in methods and variables in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/builtin/overview.md): This document provides a reference for built-in methods and variables available in n8n, used for data manipulation and access within expressions and the Code node. It outlines various categories like current node input, date and time, and data transformation functions, noting their availability across different n8n features. The document also directs users to the Cookbook for practical examples.
- [Using the Code Node in n8n Workflows](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/code-node.md): The Code node in n8n allows users to write custom JavaScript or Python code to extend workflow functionality. It replaces the older Function and Function Item nodes, offering features like promises, console logging, and support for external libraries in self-hosted deployments. Users can choose between running code once for all items or for each item, and leverage built-in methods and variables for data manipulation. AI-powered code generation is also available for Cloud users.
- [Accessing All Items in n8n Nodes](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/builtin/all.md): This document explains how to use the "all" method in n8n to access all items from current or parent nodes, including examples for retrieving and processing data in both JavaScript and Python.
- [n8n Workflow Execution Details](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/builtin/execution.md): This document outlines the properties of the `execution` object in n8n workflows, including `id` for unique execution identification, `resumeUrl` for resuming waiting workflows via webhooks, and `customData` for setting and retrieving custom execution-specific data within the Code node.
- [n8n: getWorkflowStaticData](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/builtin/get-workflow-static-data.md): The `getWorkflowStaticData` function in n8n provides access to static workflow data, allowing users to save and retrieve small pieces of data directly within a workflow. This feature supports both global data accessible throughout the workflow and node-specific data, enabling use cases like storing a timestamp of the last processed item from an RSS feed. It's important to note that this is an experimental feature with limitations, such as data not being available during workflow testing and potential unreliability under high-frequency executions. The data is automatically saved when the workflow execution succeeds if changes are detected.
- [Item Matching in n8n Workflows](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/builtin/itemmatching.md): This document explains how to retrieve linked items from earlier nodes in an n8n workflow using the `itemMatching` function. It provides a practical example of a workflow that demonstrates how to restore an email address to a person's data after it has been simplified by an intermediate node.
- [n8n Docs on Vars](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/builtin/vars.md): This document explains the `vars` object in n8n, which provides read-only access to user-defined variables within the active environment, contrasting it with `env` for system environment variables and detailing its availability and usage in both JavaScript and Python.
- [n8n Built-in Methods and Variables](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/builtin.md): This document provides examples of using n8n's built-in methods and variables for data manipulation and access within workflows, with links to detailed resources.
- [Output to the browser console](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/code-node/console-log.md): This document explains how to use `console.log()` in JavaScript and `print()` in Python within the n8n Code node for debugging. It also covers handling `[object Object]` output by checking and converting data types, specifically addressing JsProxy objects in Python.
- [Get the binary data buffer](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/code-node/get-binary-data-buffer.md): This document explains how to access the binary data buffer in n8n workflows using the `getBinaryDataBuffer()` function. It outlines various use cases like data manipulation, calculations, and complex HTTP requests, while also noting that this functionality is not available in Python. The document provides examples and advises against older methods of accessing the buffer directly.
- [Get Number of Items from Last Node](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/code-node/number-items-last-node.md): This page explains how to determine the number of items returned by the previous node in n8n, providing code examples in both JavaScript and Python, along with expected output formats.
- [Code node cookbook](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/code-node.md): This document provides examples and recipes for using the Code node in n8n, covering tasks like getting the number of items from the last node, retrieving binary data buffers, and outputting to the browser console. It also references related resources such as built-in methods and the Code node documentation.
- [Check Incoming Data](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/expressions/check-incoming-data.md): This document explains how to check incoming data in n8n using expressions, specifically demonstrating the use of the ternary operator, nullish coalescing operator, and logical OR operator to handle cases where data might be missing or empty.
- [Common Issues with Expressions in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/expressions/common-issues.md): This document outlines common errors encountered when using expressions in n8n, such as invalid JSON output, inability to retrieve data for expressions, and invalid syntax, along with steps to troubleshoot and resolve these issues.
- [Expressions Cookbook](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/expressions.md): This document provides examples and recipes for tasks that can be accomplished using expressions within n8n. It also covers common issues and provides references to built-in methods, variables, and general expression documentation.
- [HTTP Request Node Pagination](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/http-node/pagination.md): This document explains how to configure pagination within n8n's HTTP Request node. It covers various pagination modes including using next page URLs from responses, paginating by number using $pageCount, and navigating through body parameters. Additionally, it details how to set the page size within the query.
- [HTTP Request Node Examples](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/http-node.md): This document provides examples and related resources for using n8n's HTTP Request node to query data from applications and services with REST APIs, including pagination.
- [Query JSON with JMESPath in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/jmespath.md): This document explains how to use JMESPath, a JSON query language, within n8n workflows. It covers the `jmespath()` method in n8n, its syntax, and practical examples for common tasks like applying projections and selecting multiple elements from JSON objects.
- [Date and time with Luxon | n8n Docs](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/cookbook/luxon.md): This document explains how to work with dates and times in n8n using the Luxon JavaScript library. It covers parsing date strings, using n8n's custom Luxon variables like "now" and "today", handling timezone settings, and performing common operations such as converting date strings, calculating dates relative to the current day, and formatting dates for human readability. The document also highlights the differences between Luxon and standard JavaScript Date objects and provides examples for both "Expressions (JavaScript)" and "Code node (JavaScript/Python)" environments within n8n.
- [Expressions in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/expressions.md): Expressions are a powerful feature in n8n that allow dynamic setting of node parameters using data from previous nodes, workflow, or environment, and support JavaScript execution for data manipulation. They leverage n8n's templating language, Tournament, and integrate with Luxon for date/time and JMESPath for JSON querying. The documentation demonstrates how to write expressions, provides examples for extracting data from webhooks, and discusses limitations of JavaScript within expressions.
- [Custom Variables in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/code/variables.md): This document describes how to create, edit, delete, and use custom variables in n8n workflows. Custom variables are read-only and shared across all workflows within an n8n instance. This feature is available on Self-hosted Enterprise and Pro Cloud plans, from version 0.225.0 onwards.
- [Code in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/code.md): n8n is a low-code tool that allows users to add custom code when needed. This includes using expressions and the Code node within workflows for JavaScript or Python. Technical users can also leverage core nodes for API requests, webhooks, and file handling, represent complex logic with flow control nodes, and interact with the n8n API. Additionally, n8n supports self-hosting and the creation of custom nodes for extended functionality.
- [Navigating the Editor UI in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-one/chapter-1.md): This document provides a comprehensive guide to navigating the n8n Editor UI, detailing its various sections such as the left-side panel, top bar, and canvas. It also explains the different types of nodes—App/Action, Trigger, Core, and Cluster Nodes—and how to find, add, and manage them within the Editor UI for building workflows.
- [Building a mini-workflow](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-one/chapter-2.md): This document outlines a five-step process for building a small workflow to retrieve 10 articles about automation from Hacker News. It details adding and configuring Manual Trigger and Hacker News nodes, including setting parameters like resource, operation, limit, and keywords, as well as adjusting display settings. The guide also covers executing nodes, interpreting results in table and JSON views, and saving/renaming the workflow.
- [Automating a Real-world Use Case](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-one/chapter-3.md): This chapter introduces a scenario where Nathan, an Analytics Manager, seeks to automate his repetitive and error-prone weekly sales reporting tasks. The current process involves manually collecting data from a legacy data warehouse, calculating sales figures, announcing them on Discord, and creating spreadsheets for sales managers. The chapter highlights the challenges of manual data handling and the potential for n8n to connect to the data warehouse's API endpoints to create an automated workflow.
- [Designing a Workflow in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-one/chapter-4.md): This document outlines the steps involved in designing an automated workflow using n8n. It covers data retrieval, filtering, calculation, and integration with external services like Discord and Airtable, providing a roadmap for building a practical workflow.
- [Getting Data From a Data Warehouse with the HTTP Request Node](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-one/chapter-5/chapter-5.1.md): This document explains how to use the HTTP Request node in n8n to retrieve data from a data warehouse, particularly when a dedicated node for the service is unavailable. It covers creating a new workflow, adding and configuring an HTTP Request node with authentication and headers, and executing the node to retrieve data. The document also details the structure of the retrieved data, which includes sales information.
- [Inserting data into Airtable](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-one/chapter-5/chapter-5.2.md): This document explains how to insert data into Airtable using the Airtable node in n8n. It covers configuring the Airtable table, adding and configuring the Airtable node in the workflow, and testing the node to ensure data is successfully inserted.
- [Filtering Orders](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-one/chapter-5/chapter-5.3.md): This document explains how to filter orders using conditional logic and expressions within n8n workflows. It focuses on utilizing the If node to process orders based on their "orderStatus," specifically filtering for "processing" orders to be inserted into Airtable. The document also introduces expressions, data types, and workflow testing, and briefly discusses the efficiency of data handling.
- [Setting Values for Processing Orders](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-one/chapter-5/chapter-5.4.md): This document explains how to use the Edit Fields (Set) node in n8n workflows to select and set specific data, like employee names and order IDs, before transferring it to Airtable. It provides a detailed guide on configuring the node and integrating it with an Airtable base for processing orders.
- [Calculating Booked Orders](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-one/chapter-5/chapter-5.5.md): This document explains how to use the Code node in n8n workflows to perform calculations on data. It covers the Code node's modes, n8n's data structure, and provides an example of calculating total booked orders and their value using JavaScript.
- [Notifying the Team](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-one/chapter-5/chapter-5.6.md): This document explains how to send messages to a Discord channel using the Discord node in n8n, including configuring the node with a webhook and constructing a message from workflow data. It also mentions alternative communication app nodes like Slack and Mattermost.
- [Scheduling The Workflow](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-one/chapter-5/chapter-5.7.md): This document outlines how to schedule a workflow to run automatically at a specific time and interval using the Schedule Trigger node in n8n. It covers removing the Manual Trigger node, adding and configuring the Schedule Trigger node for weekly execution on Mondays at 9 AM, and connecting it to the existing HTTP Request node. The guide emphasizes the importance of setting the correct timezone for accurate scheduling and sets up the next steps for activating the workflow.
- [Activating and Examining the Workflow](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-one/chapter-5/chapter-5.8.md): This document explains how to activate workflows, monitor their executions, and configure workflow settings in n8n. It covers activating workflows to run automatically, viewing execution logs for debugging, and customizing workflow behavior through various settings like error handling, timezone, and execution data saving.
- [Exporting and Importing Workflows in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-one/chapter-6.md): This chapter explains how to export and import n8n workflows as JSON files, which is useful for sharing and collaboration. It covers three methods: Editor UI menu, Editor UI canvas, and command line. The chapter also provides a warning regarding sharing credentials included in the exported JSON files.
- [Test your knowledge](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-one/chapter-7.md): This page serves as a concluding section for the n8n Course Level 1, offering a quiz to test theoretical and practical knowledge of workflow automation. It provides details on the quiz format and passing criteria, and suggests next steps for learners, including creating new workflows, seeking inspiration from various n8n resources, and progressing to n8n Course Level 2.
- [n8n Course Level 1: Introduction to n8n Automation](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-one.md): This course introduces users to fundamental n8n concepts, helping them develop low-code automation expertise by building practical workflows and understanding data structures within n8n.
- [Understanding the n8n Data Structure](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-two/chapter-1.md): This chapter explains the n8n data structure, which is an array of objects, and demonstrates how to create and manipulate data using the Code node. It also covers referencing node data and transforming data using various methods.
- [Processing Different Data Types in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-two/chapter-2.md): This chapter of the n8n documentation explains how to process various data types like HTML, XML, date, time, and interval data using specific n8n nodes. It provides practical exercises for extracting information from HTML, converting between XML and JSON, and manipulating date and time values, including pausing workflow execution with the Wait node.
- [Merging and Splitting Data in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-two/chapter-3.md): This chapter of the n8n documentation explains how to merge and split data within workflows, covering concepts like one-way vs. two-way synchronization, different merge options provided by the Merge node, and an exercise to practice merging data from multiple sources. It also briefly touches upon automatic looping in n8n for repetitive data processing.
- [Handling Errors in n8n Workflows](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-two/chapter-4.md): This document explains how to troubleshoot and manage errors in n8n workflows. It covers checking failed workflows in the Executions log, creating error workflows with the Error Trigger node for automated error handling, and using the Stop and Error node to intentionally throw exceptions for data validation and clearer error tracking. The guide provides practical advice and an exercise to help users implement robust error management strategies.
- [Automating a Business Workflow with n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-two/chapter-5/chapter-5.0.md): This document outlines a use case for automating business workflows using n8n, focusing on sales data reporting. It breaks down the workflow into design steps, including data acquisition, sorting, file writing, and notifications, and lists the necessary prerequisites like Airtable, Google, and Discord accounts for building the automated solution.
- [Workflow 1: Merging Data](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-two/chapter-5/chapter-5.1.md): This document outlines a workflow using n8n to merge customer data from Airtable with regional information from the REST Countries API. The process involves listing customer data, fetching country details, merging based on country name, and updating Airtable with region and subregion information. The document also includes quiz questions related to the workflow steps.
- [Workflow 2: Generating Reports](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-two/chapter-5/chapter-5.2.md): This document outlines a detailed n8n workflow for generating reports by merging data from various sources, transforming binary data, creating files, and sending notifications. The workflow is broken down into three parts: acquiring data from different sources such as an API and Airtable, generating regional sales reports, and generating total sales reports. Each section provides step-by-step instructions for configuring relevant nodes, including HTTP Request, Airtable, Merge, Sort, If, Convert to File, Gmail, Discord, Loop Over Items, Set, and Date & Time nodes. Quiz questions are included for each part to reinforce learning.
- [Workflow 3: Monitoring Workflow Errors](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-two/chapter-5/chapter-5.3.md): This document outlines how to create an error workflow in n8n to monitor a main workflow for errors. It describes configuring an Error Trigger node and a Discord node to send notifications when errors occur, including details like workflow name, error message, last executed node, and execution URL. The document also includes quiz questions related to the Error Trigger node.
- [n8n Course Level 2 Knowledge Test](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-two/chapter-6.md): This document is the final chapter of the n8n Course Level 2, offering a quiz to test knowledge on workflow automation and business workflow concepts learned throughout the course. It outlines quiz parameters and suggests next steps for continued learning and engagement with the n8n community.
- [n8n Course Level 2 Introduction](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses/level-two.md): This document introduces the n8n Course Level 2, an intermediate-level course focusing on data handling, error management, and advanced n8n features, designed for users who have completed Level 1 and want to automate complex business processes.
- [n8n Automation Courses](https://rawhubusercontent.com/dyingc/mcp_docs/main/courses.md): This document introduces the n8n automation courses, emphasizing that automation can handle repetitive tasks and is accessible to everyone, even without advanced technical knowledge. It outlines two available courses: Level 1 for beginners and Level 2 for intermediate users.
- [n8n Credentials Documentation](https://rawhubusercontent.com/dyingc/mcp_docs/main/credentials.md): This document explains what credentials are in n8n, how to access and manage them through the UI, and provides links to related topics like creating, editing, sharing, and finding service-specific credentials.
- [n8n Data Documentation](https://rawhubusercontent.com/dyingc/mcp_docs/main/data.md): This document introduces data in n8n, describing its structure, flow, transformation, and processing using code. It also covers advanced topics like pinning, editing, mapping, and linking data items. The document lists related data transformation nodes like Aggregate, Limit, Remove Duplicates, Sort, Split Out, and Summarize.
- [n8n Embed Documentation and Guides](https://rawhubusercontent.com/dyingc/mcp_docs/main/embed.md): n8n Embed is a paid offering that allows users to white-label n8n or incorporate it into their commercial software. This documentation provides information on its usage, costs, licensing, and support, with a note on its unavailability in Russia and Belarus.
- [External Secrets for n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/external-secrets.md): n8n supports external secret stores like AWS Secrets Manager, Azure Key Vault, GCP Secrets Manager, Infisical, and HashiCorp Vault for managing credentials, enhancing security and centralizing credential management across n8n environments. This feature is available on Enterprise Self-hosted and Enterprise Cloud plans. To connect n8n, configure the provider in settings and then reference secrets in n8n credentials using expressions. External secrets also integrate with n8n environments for consistent credential usage.
- [Flow logic](https://rawhubusercontent.com/dyingc/mcp_docs/main/flow-logic.md): This document describes how to represent complex logic in n8n workflows, covering topics such as splitting with conditionals, merging data, looping, waiting, sub-workflows, error handling, and execution order in multi-branch workflows. It also references related sections on data and core nodes used for implementing flow logic.
- [n8n Glossary](https://rawhubusercontent.com/dyingc/mcp_docs/main/glossary.md): This document defines key terms related to n8n, including AI concepts like AI agents, chains, embeddings, memory, tools and vector stores, and n8n-specific terms such as canvas, cluster nodes, credentials, data pinning, editor, entitlements, evaluation, expressions, nodes, projects, root nodes, sub nodes, templates, trigger nodes, and workflows, along with definitions for API, LangChain, and Large Language Models (LLMs).
- [n8n Self-Hosting Documentation](https://rawhubusercontent.com/dyingc/mcp_docs/main/hosting.md): This document provides comprehensive guidance on self-hosting n8n, covering installation, configuration, user authentication, scaling, and security for both Enterprise and Community editions. It details how to set up n8n on various platforms, manage environment variables, and secure instances with SSL, SSO, or 2FA. Additionally, it introduces starter kits for self-hosted AI workflows and outlines essential technical prerequisites for successful self-hosting.
- [n8n Docs: Workflow Automation and Integrations](https://rawhubusercontent.com/dyingc/mcp_docs/main/index.md): n8n Docs provides documentation for n8n, a fair-code licensed workflow automation tool combining AI capabilities with business process automation, covering setup, usage, and development.
- [n8n Insights](https://rawhubusercontent.com/dyingc/mcp_docs/main/insights.md): n8n Insights provides instance owners and admins with visibility into workflow performance over time, including a summary banner, a detailed dashboard, and the ability to track time saved by workflows. This feature helps users understand the efficiency and impact of their automated processes.
- [n8n Integrations Documentation and Guides](https://rawhubusercontent.com/dyingc/mcp_docs/main/integrations.md): n8n integrations, referred to as nodes, are the fundamental components for building workflows, enabling data retrieval, processing, and sending. This document outlines n8n's various types of nodes, including built-in, community-contributed, and credential-only nodes, and explains how to handle custom operations and generic integrations using the HTTP Request node. It also provides guidance on creating new nodes and managing existing ones, along with information on node functionalities and credential management.
- [Keyboard Shortcuts | n8n Docs](https://rawhubusercontent.com/dyingc/mcp_docs/main/keyboard-shortcuts.md): This document outlines the various keyboard shortcuts available in n8n for workflow control, canvas navigation, node manipulation, node panel interactions, and within nodes themselves.
- [Learning Path](https://rawhubusercontent.com/dyingc/mcp_docs/main/learning-path.md): This guide outlines tutorials and resources for getting started with n8n, covering community engagement, setup, quickstart guides, structured courses (video and text), self-hosting options, and building custom nodes.
- [License Key Activation in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/license-key.md): This document outlines two methods for activating a license key in n8n: via the user interface and by setting an environment variable, and also mentions the need to allowlist Cloudflare IP addresses for license server access.
- [Log Streaming](https://rawhubusercontent.com/dyingc/mcp_docs/main/log-streaming.md): Log streaming in n8n allows you to send events from n8n to your own logging tools, enabling integrated monitoring and alerting. It is available on Enterprise Self-hosted and Cloud plans. You can configure log streaming in Settings > Log Streaming, adding destinations like a syslog server, a generic webhook, or a Sentry client. Various events, including workflow, node execution, and audit events, can be streamed. Self-hosted users can further configure log streaming via environment variables.
- [n8n Privacy and Security](https://rawhubusercontent.com/dyingc/mcp_docs/main/privacy-security.md): This document outlines n8n's commitment to data privacy and security, providing an overview of key policies and procedures. It details how n8n handles and secures data, including links to more information on privacy, security, incident response, and user actions. Contact information for privacy and security inquiries is also provided.
- [n8n Documentation](https://rawhubusercontent.com/dyingc/mcp_docs/main/reference.md): This document serves as the official documentation for n8n, a fair-code licensed workflow automation tool that integrates AI capabilities with business process automation, covering setup, usage, and development for various deployment options.
- [n8n Release Notes](https://rawhubusercontent.com/dyingc/mcp_docs/main/release-notes.md): This document outlines new features, bug fixes, and updates for n8n, including information on the latest and next versions, updating instructions, and details on semantic versioning. It also highlights specific releases with new features like "Convert to sub-workflow" and API support for user assignment to projects, along with performance improvements and bug fixes.
- [Source Control and Environments in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/source-control-environments.md): This document explains how n8n uses Git-based source control to support multiple environments, detailing setup, usage for pushing and pulling work, copying work between instances, and offering a tutorial for creating environments. It covers the core concepts of environments within n8n, how Git is integrated, and various branch patterns, primarily for Enterprise users with administrative privileges.
- [Sustainable Use License](https://rawhubusercontent.com/dyingc/mcp_docs/main/sustainable-use-license.md): This document outlines n8n's Sustainable Use License (SUL), a fair-code license created to balance free use with business sustainability. It details what the SUL covers, permissible and impermissible uses, and answers frequently asked questions regarding its scope and n8n's licensing model.
- [n8n Docs - Try it out](https://rawhubusercontent.com/dyingc/mcp_docs/main/try-it-out.md): This document provides an introduction to getting started with n8n, highlighting tutorials like the "First Workflow," building an AI chat agent, and extensive examples in courses.
- [User management](https://rawhubusercontent.com/dyingc/mcp_docs/main/user-management.md): n8n's user management feature enables inviting individuals to collaborate within an n8n instance, offering login/password management, user addition/removal, and three account types: Owner, Member, and Admin (for Pro & Enterprise plans). It does not transmit personal information to n8n. Setup guides are available for Cloud and self-hosted instances, including LDAP and SAML configurations.
- [n8n Video Courses](https://rawhubusercontent.com/dyingc/mcp_docs/main/video-courses.md): This document outlines two n8n video courses available on YouTube: a Beginner course covering n8n basics like workflows, APIs, and nodes, and an Advanced course exploring complex workflows, technical nodes, and enterprise features.
- [Connections](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/components/connections.md): This document describes how to create and delete connections between nodes in an n8n workflow. Connections route data from one node's output to another node's input. Instructions include selecting the grey dot or "Add node" to create a connection, and hovering over the connection to select "Delete" to remove it.
- [Nodes](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/components/nodes.md): This document describes what nodes are in n8n, how to add them to workflows, and their various operations and settings. Nodes are the fundamental building blocks of workflows, used for tasks such as starting workflows, sending and fetching data, and processing information. The guide covers adding nodes to both empty and existing workflows, explaining trigger and action operations. It also details node controls like execution, deactivation, and deletion, and various settings such as request options, error handling, and notes.
- [Sticky Notes](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/components/sticky-notes.md): This document explains how to use Sticky Notes in n8n workflows for annotation and commenting. It covers creating, editing, and changing the color of Sticky Notes, as well as their positioning and support for Markdown formatting. The guide also provides tips on using Markdown for text formatting and making images full width within Sticky Notes.
- [Workflow components](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/components.md): This document outlines the key components of n8n workflows, including nodes for integrations and operations, connections for linking nodes, and sticky notes for documentation.
- [Create and Run Workflows](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/create.md): This document outlines how to create and manage workflows in n8n, including manual and automatic execution. It details the steps for creating a new workflow, choosing a personal space or project, and adding a trigger node. The document also explains how to run workflows manually for testing and how to activate workflows for automatic execution based on trigger conditions.
- [All executions](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/executions/all-executions.md): This page explains how to view, filter, and retry workflow executions in n8n. It covers accessing execution history from the Overview page or within projects, filtering by workflow, status, start time, and custom data, and retrying failed executions with either the current or original workflow definition. It also notes that deleted workflows lose their execution history and highlights feature availability for custom execution data.
- [Custom Executions Data](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/executions/custom-executions-data.md): This document explains how to set and access custom data in n8n workflow executions using the Code node or Execution Data node, allowing users to filter execution lists and retrieve data within workflows.
- [Debug and Re-run Past n8n Workflow Executions](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/executions/debug.md): Learn how to debug and re-run past workflow executions in n8n Cloud and registered Community plans by loading data from previous executions into your current workflow, allowing you to fix and re-run failed processes with the original data.
- [Manual, Partial, and Production Executions in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/executions/manual-partial-and-production-executions.md): This document outlines the differences between manual, partial, and production executions in n8n workflows. It details how manual executions are used for testing, partial executions for running specific workflow steps, and production executions for automatic, triggered workflow runs, providing guidance on their use and troubleshooting common issues.
- [Workflow-level executions](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/executions/single-workflow-executions.md): This document describes how to view, filter, and retry workflow-level executions in n8n. It differentiates between execution history and workflow history, and explains how to use custom execution data for filtering. Instructions are provided for viewing and filtering executions, as well as retrying failed workflows with different options.
- [Executions](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/executions.md): An execution in n8n is a single run of a workflow. There are two execution modes: manual and production. n8n provides two execution lists: workflow-level executions and all executions. You can also add custom data to executions.
- [Export and import workflows in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/export-import.md): Learn how to export and import n8n workflows using various methods: copy-paste, the Editor UI menu (Download, Import from URL, Import from File), or command-line interface. Be mindful of sensitive information like credential names/IDs and authentication headers when sharing exported JSON files.
- [Workflow History](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/history.md): This document explains how to use workflow history in n8n to view and restore previous versions of your workflows. It details when new versions are created, distinguishes workflow history from execution history, and provides instructions on how to view, restore, or copy previous workflow versions.
- [Workflow Settings in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/settings.md): This document outlines the various customizable settings available for individual workflows in n8n, covering options like execution order, error handling, callability, timezone, and execution saving preferences.
- [Workflow Sharing in n8n](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/sharing.md): This document outlines how to share workflows between users within the same n8n instance, detailing the process for sharing, viewing shared workflows, and understanding workflow roles and permissions.
- [Workflow Tags](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/tags.md): This document describes how to use workflow tags in n8n. It covers adding tags to workflows, filtering workflows by tags, and managing existing tags, including editing and deleting them. Tags are global and affect all users on an n8n instance.
- [n8n Workflow Templates](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/templates.md): This document provides information on workflow templates in n8n, covering how to access them, contribute to the n8n library, and manage templates for self-hosted instances, including disabling templates and using custom template libraries with specific API endpoints and data schemas.
- [Workflow ID](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows/workflow-id.md): This document explains how to locate the workflow ID within n8n. It can be found in the URL of the open workflow or in the workflow settings title. This information helps users identify and manage their workflows effectively. The page also includes options for user feedback.
- [Workflows](https://rawhubusercontent.com/dyingc/mcp_docs/main/workflows.md): This document introduces workflows in n8n, defining them as interconnected nodes that automate processes. It covers creating workflows, using templates, understanding components, debugging with execution lists, and sharing workflows. The document also suggests using quickstart guides for new users to explore n8n features.
