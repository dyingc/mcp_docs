# Document Index
- [README](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/README.md): The r2ai project integrates language models with radare2 for reverse engineering assistance, featuring native and JavaScript plugins, support for local and remote models, auto mode, and integration with OpenAI, Anthropic, and other services.
- [README](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/README.md): r2ai integrates language models with radare2 for reverse engineering assistance, supporting local and remote models, auto-solving tasks, vector databases, and scripting via r2pipe, and includes plugins for native C and r2js.
- [README](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/README.md): This document describes r2ai, a tool to integrate language models with radare2 for reverse engineering tasks, including a native plugin, a decompiler using r2js, and a deprecated Python CLI with server. It supports local and remote language models, auto mode for task solving, and integration with various services like OpenAI and Anthropic. The tool can be installed via r2pm or from sources, adding an `r2ai` command to radare2. API keys for services like OpenAI and Anthropic can be stored in designated files.
- [README](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/README.md): r2ai is a project that integrates language models with radare2 for reverse engineering assistance, offering features like auto-solving tasks, support for local and remote models (including OpenAI and Anthropic), code indexing, and scripting via r2pipe, with installation available through r2pm or from sources.
- [README](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/README.md): R2AI integrates language models with radare2 for reverse engineering tasks, supporting local and remote models, auto-solving, vector databases, and scripting via r2pipe, with installation available through r2pm or from sources, including native C and r2js plugins, and a deprecated Python CLI tool.
- [README](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/README.md): r2ai integrates language models with radare2 for reverse engineering tasks, supporting local and remote models, auto-solving, various APIs, code indexing, and scripting via r2pipe, installable via r2pm or from sources.
- [README](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/README.md): R2AI integrates language models with radare2 for reverse engineering tasks, supporting local and remote models, various APIs, and features like auto-solving, code indexing, and scripting via r2pipe, with installation via r2pm recommended.
- [README](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/README.md): This document describes r2ai, a radare2 plugin and toolset that integrates language models for reverse engineering assistance, enabling tasks like code comprehension, decompilation, and automated problem-solving using local or remote language models and function calling.
- [README](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/README.md): This document introduces r2ai, a tool that integrates language models with radare2 for reverse engineering assistance and other tasks, outlining its components, features such as auto mode and local/remote model support, and installation instructions via r2pm or from sources.
- [README](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/README.md): r2ai is a project integrating language models with radare2 for reverse engineering tasks, featuring native plugins, decompilation tools, and support for local and remote models like OpenAI and Anthropic.
- [README](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/README.md): This document describes r2ai, a project integrating language models with radare2 for reverse engineering assistance, including plugins, features like auto-solving tasks and support for various local and remote language models, and installation instructions via r2pm or from source.
- [README](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/README.md): The r2ai project integrates language models with radare2 for reverse engineering tasks, offering features like auto-solving, local/remote model support, code indexing, and scripting via r2pipe; it includes a C plugin, a JavaScript plugin for decompilation, and supports OpenAI, Anthropic, and other language models.
- [ci.yml](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/.github/workflows/ci.yml): This GitHub Actions CI configuration file defines workflows for building and testing the r2ai project, including building the C rewrite, linting the Python code, and running r2ai from the shell, r2pipe, and r2.
- [releases](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/.github/workflows/releases.yml): This GitHub Actions workflow automatically creates a GitHub release when a new tag is pushed to the repository, generating release notes and marking the release as non-draft and non-prerelease.
- [README](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/src/README.md): This document describes the C rewrite of the r2ai plugin for radare2, including installation instructions, features like decompilation and vulnerability detection, usage examples, and an overview of the messages API for managing AI conversations.
- [vdb_embed.inc.c](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/src/vdb_embed.inc.c): This file implements functions for computing text embeddings using a TF-IDF approach, including tokenization, frequency analysis, and L2 normalization, with an experimental Ollama embedding option.
- [vdb](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/src/vdb.c): This file implements a vector database (VDB) with KD-tree indexing for efficient nearest neighbor search, supporting operations like insertion, querying, and result set management.
- [tools.c](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/src/tools.c): This file defines radare2 AI tools, including r2cmd for running radare2 commands and execute_js for executing JavaScript scripts, along with functions for parsing, converting, and freeing tool structures for use with language models like OpenAI and Anthropic.
- [segment](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/src/segment.c): This C code snippet configures and utilizes an AI provider, retrieving the API key from config, file, or environment variables before calling the provider.
- [r_vdb.h](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/src/r_vdb.h): This header file defines data structures and functions for a k-d tree based vector database (RVdb), including structures for vectors, KDNodes, the RVdb itself, result sets, and tokens, along with functions for creating, inserting data, querying, and freeing the database.
- [r2ai_http](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/src/r2ai_http.c): This file implements the r2ai HTTP client, featuring interrupt handling, timeout management, rate limiting with exponential backoff, and retrying on errors using libcurl. It includes functions for handling SIGINT signals, sleeping with backoff, and performing HTTP POST requests with error checking and retry logic, configurable via r2ai configuration variables.
- [r2ai.h](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/src/r2ai.h): This header file defines the data structures and function prototypes for the r2ai plugin, which integrates AI models into radare2, enabling features like natural language querying, code analysis, and automated exploitation. It includes structures for managing tools, messages, content blocks, and chat responses, as well as functions for message handling, tool execution, and HTTP communication with AI providers like OpenAI and Anthropic. The file also defines functions for converting data between JSON and internal structures, managing conversations, and processing messages using LLMs, thus providing a comprehensive interface for AI-powered analysis within radare2.
- [r2ai](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/src/r2ai.c): This file provides an interface to interact with Large Language Models (LLMs) using radare2, including functionalities for querying, decompiling, and analyzing code with AI assistance, supporting providers like OpenAI and Anthropic, and offering features like chat history, context management, and vulnerability detection.
- [openai.c](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/src/openai.c): This file implements the OpenAI API interface for r2ai, including managing model compatibility, constructing API requests with messages and tools, and handling API responses, with a focus on error checking and debugging.
- [messages](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/src/messages.c): This file manages message storage and manipulation for the r2ai plugin, including initialization, adding, freeing, and clearing messages, with support for tool calls and content blocks.
- [r2ai-server README](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/server/README.md): This document describes r2ai-server, a tool that simplifies launching and setup of various language model webservers like ollama, llamacpp, and r2ai by providing a unified syntax and model management through r2pm.
- [r2ai-python](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/py/README.md): This document describes the deprecated Python implementation of AI support for radare2, outlining its command-line REPL, radare2 core plugin, and Python API capabilities, its focus on LlamaCpp and litellm API providers, reasons for deprecation including performance and environment issues, and instructions for usage on Windows, model selection, and auto mode, including configuration settings.
- [vdb](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/openapiproxy/vdb.ts): This TypeScript code implements a Vector Database with TF-IDF embedding and KD-Tree indexing for efficient nearest neighbor search, designed for pure string manipulation without external dependencies, mirroring the logic of the original C implementation in r2ai.
- [translator](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/examples/translator.txt): This file configures a translator tool to convert English sentences into Japanese phoneme transcriptions, along with a pronunciation guide using English phonemes; it is not intended for conversational use.
- [usage-kobold](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/doc/usage-kobold.md): This document explains how to use KoboldCpp with r2ai, including installation and running instructions, and how to connect r2ai to the KoboldCpp server.
- [prompts](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/doc/prompts.txt): This file contains example prompts that instruct a language model to include verbatim code snippets from recommended procedures in its plan, especially for deprecation notices, and to use fenced code blocks to execute code.
- [README](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/decai/README.md): Decai is an AI-powered radare2 plugin for decompilation, code explanation, vulnerability analysis, and more, supporting various language models and services like Ollama, OpenAI, and Mistral.
- [r2ai](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/Attic/r2ai.ts): This TypeScript file uses the OpenAI API and r2pipe to analyze code with radare2, leveraging OpenAI's text-davinci-003 model to explain decompiled functions and optionally using text-to-speech for the output.
- [nltk](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/Attic/nltk.py): This Python script uses the NLTK library to tokenize, tag, and extract interesting parts of speech (adjectives, cardinal digits, nouns) from a list of sentences.
- [nl](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/Attic/nl.py): This script uses the nltk library to tokenize a sentence, remove stop words, and print the resulting shortened sentence.
- [llmcom](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/Attic/llmcom.py): This script uses the transformers library to generate text based on the facebook/llm-compiler-13b model, or a quantized version, taking an LLVM IR snippet as input and generating a sequence of code.
- [r2ai Plugin for radare2](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/Attic/README.md): This plugin allows users to describe functions in radare2 using the OpenAI public API, requiring an OpenAI API key and compilation via `make`. The plugin can be used to generate text descriptions of functions, and future applications include answering questions about r2pipe, identifying crypto algorithms, and supporting multiple languages.
- [prompt-voice2cmd](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/doc/prompt-voice2cmd.md): This document provides a prompt for an expert radare2 assistant that translates natural language instructions into radare2 commands, using a semicolon to separate multiple commands and prioritizing mapped actions.
- [socialai](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/examples/socialai.py): This Python script simulates a social media environment where an AI model interacts with different personas (defined as peers) to respond to user messages in character, leveraging a llama_cpp model for text generation and maintaining a context of previous messages to inform responses.
- [gitci](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/examples/gitci.py): This script automates patch generation and commit message creation using git diff and a language model, then removes the patch file.
- [gemini](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/examples/gemini.py): This Python script uses the google.generativeai library to generate text explaining how AI works, utilizing the Gemini 1.5 Flash model.
- [funcall](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/examples/funcall.py): This Python script uses a language model to parse user questions and map them to function calls with arguments, using a predefined prompt and available functions like getting weather updates, listing symbols, patching instructions, finding strings, setting flags, and petting animals.
- [explain](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/examples/explain.py): This python script takes an input string from stdin, and uses the r2ai tool to generate a one-sentence explanation of the input, framing it as a function. It then prints the explanation as a comment block followed by the original input.
- [autocomment](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/examples/autocomment.py): This script uses r2ai to add comments to a given input string from stdin, enhancing its readability by utilizing the Mistral-7B-Instruct-v0.1-GGUF model.
- [server.ts](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/openapiproxy/server.ts): This TypeScript server script acts as a proxy, intercepting and modifying `/api/chat` POST requests to inject context from a VectorDB into the message content before forwarding the request to a target server, effectively augmenting user prompts with relevant information retrieved from the database based on the user query.
- [markdown.h](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/src/markdown.h): This header file defines the data structures and functions for rendering markdown text with ANSI color codes for terminal display, including theme configuration for text styling, headings, lists, and checkboxes, along with functions to set, get, and apply themes.
- [markdown](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/src/markdown.c): This file implements a markdown parser and renderer with customizable themes for console output, supporting features like headings, lists, code blocks, and inline formatting.
- [indent](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/src/indent.py): This script uses clang-format to format a file in-place and then reformats function calls to insert a space between the function name and the opening parenthesis.
- [auto.c](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/src/auto.c): This file implements automated analysis using r2ai, incorporating timing and cost tracking, handling tool calls, and managing interactions with the language model, designed for reverse engineering tasks.
- [anthropic](https://raw.githubusercontent.com/dyingc/mcp_docs/master/docs_output/r2ai/radareorg/r2ai/blob/master/src/anthropic.c): This file implements the r2ai_anthropic function for interacting with the Anthropic API to generate chat responses, including handling system prompts, converting messages and tools to JSON format, making HTTP requests, and parsing responses, with support for tool calls and usage statistics.
